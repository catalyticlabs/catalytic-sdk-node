/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { CatalyticSDKAPIContext } from "./catalyticSDKAPIContext";

class CatalyticSDKAPI extends CatalyticSDKAPIContext {
  /**
   * Initializes a new instance of the CatalyticSDKAPI class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.CatalyticSDKAPIOptions) {
    super(options);
  }

  /**
   * @summary Find Access Tokens
   * @param [options] The optional parameters
   * @returns Promise<Models.FindAccessTokensResponse>
   */
  findAccessTokens(options?: Models.CatalyticSDKAPIFindAccessTokensOptionalParams): Promise<Models.FindAccessTokensResponse>;
  /**
   * @param callback The callback
   */
  findAccessTokens(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findAccessTokens(options: Models.CatalyticSDKAPIFindAccessTokensOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findAccessTokens(options?: Models.CatalyticSDKAPIFindAccessTokensOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindAccessTokensResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findAccessTokensOperationSpec,
      callback) as Promise<Models.FindAccessTokensResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAccessTokenResponse>
   */
  getAccessToken(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetAccessTokenResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getAccessToken(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getAccessToken(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAccessToken(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getAccessTokenOperationSpec,
      callback) as Promise<Models.GetAccessTokenResponse>;
  }

  /**
   * @summary Revoke Access Token
   * @param id The public Id of the AccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.RevokeAccessTokenResponse>
   */
  revokeAccessToken(id: string, options?: msRest.RequestOptionsBase): Promise<Models.RevokeAccessTokenResponse>;
  /**
   * @param id The public Id of the AccessToken
   * @param callback The callback
   */
  revokeAccessToken(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The public Id of the AccessToken
   * @param options The optional parameters
   * @param callback The callback
   */
  revokeAccessToken(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  revokeAccessToken(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.RevokeAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      revokeAccessTokenOperationSpec,
      callback) as Promise<Models.RevokeAccessTokenResponse>;
  }

  /**
   * @summary Create new AccessToken in the provided Catalytic team domain.
   * AccessToken must be approved prior to use.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAccessTokenResponse>
   */
  createAccessToken(options?: Models.CatalyticSDKAPICreateAccessTokenOptionalParams): Promise<Models.CreateAccessTokenResponse>;
  /**
   * @param callback The callback
   */
  createAccessToken(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createAccessToken(options: Models.CatalyticSDKAPICreateAccessTokenOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createAccessToken(options?: Models.CatalyticSDKAPICreateAccessTokenOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createAccessTokenOperationSpec,
      callback) as Promise<Models.CreateAccessTokenResponse>;
  }

  /**
   * @summary Create new AccessToken using provided Catalytic team domain and Approve using provided
   * email and password.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAndApproveAccessTokenResponse>
   */
  createAndApproveAccessToken(options?: Models.CatalyticSDKAPICreateAndApproveAccessTokenOptionalParams): Promise<Models.CreateAndApproveAccessTokenResponse>;
  /**
   * @param callback The callback
   */
  createAndApproveAccessToken(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createAndApproveAccessToken(options: Models.CatalyticSDKAPICreateAndApproveAccessTokenOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createAndApproveAccessToken(options?: Models.CatalyticSDKAPICreateAndApproveAccessTokenOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateAndApproveAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createAndApproveAccessTokenOperationSpec,
      callback) as Promise<Models.CreateAndApproveAccessTokenResponse>;
  }

  /**
   * @summary Wait until AccessToken is approved
   * @param [options] The optional parameters
   * @returns Promise<Models.WaitForAccessTokenApprovalResponse>
   */
  waitForAccessTokenApproval(options?: Models.CatalyticSDKAPIWaitForAccessTokenApprovalOptionalParams): Promise<Models.WaitForAccessTokenApprovalResponse>;
  /**
   * @param callback The callback
   */
  waitForAccessTokenApproval(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  waitForAccessTokenApproval(options: Models.CatalyticSDKAPIWaitForAccessTokenApprovalOptionalParams, callback: msRest.ServiceCallback<any>): void;
  waitForAccessTokenApproval(options?: Models.CatalyticSDKAPIWaitForAccessTokenApprovalOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WaitForAccessTokenApprovalResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      waitForAccessTokenApprovalOperationSpec,
      callback) as Promise<Models.WaitForAccessTokenApprovalResponse>;
  }

  /**
   * @summary Get metadata for a Data Table by ID
   * @param id The ID of the Data Table to get metadata for
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDataTableResponse>
   */
  getDataTable(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetDataTableResponse>;
  /**
   * @param id The ID of the Data Table to get metadata for
   * @param callback The callback
   */
  getDataTable(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Data Table to get metadata for
   * @param options The optional parameters
   * @param callback The callback
   */
  getDataTable(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getDataTable(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetDataTableResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getDataTableOperationSpec,
      callback) as Promise<Models.GetDataTableResponse>;
  }

  /**
   * @summary Download a Data Table as a CSV or Excel file
   * @param id The ID of the Data Table to download
   * @param [options] The optional parameters
   * @returns Promise<Models.DownloadDataTableResponse>
   */
  downloadDataTable(id: string, options?: Models.CatalyticSDKAPIDownloadDataTableOptionalParams): Promise<Models.DownloadDataTableResponse>;
  /**
   * @param id The ID of the Data Table to download
   * @param callback The callback
   */
  downloadDataTable(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Data Table to download
   * @param options The optional parameters
   * @param callback The callback
   */
  downloadDataTable(id: string, options: Models.CatalyticSDKAPIDownloadDataTableOptionalParams, callback: msRest.ServiceCallback<any>): void;
  downloadDataTable(id: string, options?: Models.CatalyticSDKAPIDownloadDataTableOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DownloadDataTableResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      downloadDataTableOperationSpec,
      callback) as Promise<Models.DownloadDataTableResponse>;
  }

  /**
   * @summary Replace a Data Table with contents from a CSV or Excel file
   * @param id The ID of the Data Table to download
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceDataTableResponse>
   */
  replaceDataTable(id: string, options?: Models.CatalyticSDKAPIReplaceDataTableOptionalParams): Promise<Models.ReplaceDataTableResponse>;
  /**
   * @param id The ID of the Data Table to download
   * @param callback The callback
   */
  replaceDataTable(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Data Table to download
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceDataTable(id: string, options: Models.CatalyticSDKAPIReplaceDataTableOptionalParams, callback: msRest.ServiceCallback<any>): void;
  replaceDataTable(id: string, options?: Models.CatalyticSDKAPIReplaceDataTableOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ReplaceDataTableResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      replaceDataTableOperationSpec,
      callback) as Promise<Models.ReplaceDataTableResponse>;
  }

  /**
   * @summary Upload a csv or excel file to create a data table
   * @param [options] The optional parameters
   * @returns Promise<Models.UploadDataTableResponse>
   */
  uploadDataTable(options?: Models.CatalyticSDKAPIUploadDataTableOptionalParams): Promise<Models.UploadDataTableResponse>;
  /**
   * @param callback The callback
   */
  uploadDataTable(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadDataTable(options: Models.CatalyticSDKAPIUploadDataTableOptionalParams, callback: msRest.ServiceCallback<any>): void;
  uploadDataTable(options?: Models.CatalyticSDKAPIUploadDataTableOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UploadDataTableResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      uploadDataTableOperationSpec,
      callback) as Promise<Models.UploadDataTableResponse>;
  }

  /**
   * @summary Find Data Tables
   * @param [options] The optional parameters
   * @returns Promise<Models.FindDataTablesResponse>
   */
  findDataTables(options?: Models.CatalyticSDKAPIFindDataTablesOptionalParams): Promise<Models.FindDataTablesResponse>;
  /**
   * @param callback The callback
   */
  findDataTables(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findDataTables(options: Models.CatalyticSDKAPIFindDataTablesOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findDataTables(options?: Models.CatalyticSDKAPIFindDataTablesOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindDataTablesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findDataTablesOperationSpec,
      callback) as Promise<Models.FindDataTablesResponse>;
  }

  /**
   * @summary Get metadata of a file
   * @param id The ID of the File to get metadata for
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFileResponse>
   */
  getFile(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetFileResponse>;
  /**
   * @param id The ID of the File to get metadata for
   * @param callback The callback
   */
  getFile(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the File to get metadata for
   * @param options The optional parameters
   * @param callback The callback
   */
  getFile(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getFile(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetFileResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getFileOperationSpec,
      callback) as Promise<Models.GetFileResponse>;
  }

  /**
   * @summary Download a file
   * @param id The ID of the file to download
   * @param [options] The optional parameters
   * @returns Promise<Models.DownloadFileResponse>
   */
  downloadFile(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DownloadFileResponse>;
  /**
   * @param id The ID of the file to download
   * @param callback The callback
   */
  downloadFile(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the file to download
   * @param options The optional parameters
   * @param callback The callback
   */
  downloadFile(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  downloadFile(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DownloadFileResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      downloadFileOperationSpec,
      callback) as Promise<Models.DownloadFileResponse>;
  }

  /**
   * @summary Upload a file
   * @param [options] The optional parameters
   * @returns Promise<Models.UploadFilesResponse>
   */
  uploadFiles(options?: Models.CatalyticSDKAPIUploadFilesOptionalParams): Promise<Models.UploadFilesResponse>;
  /**
   * @param callback The callback
   */
  uploadFiles(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadFiles(options: Models.CatalyticSDKAPIUploadFilesOptionalParams, callback: msRest.ServiceCallback<any>): void;
  uploadFiles(options?: Models.CatalyticSDKAPIUploadFilesOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UploadFilesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      uploadFilesOperationSpec,
      callback) as Promise<Models.UploadFilesResponse>;
  }

  /**
   * @summary Find Instances
   * @param [options] The optional parameters
   * @returns Promise<Models.FindInstancesResponse>
   */
  findInstances(options?: Models.CatalyticSDKAPIFindInstancesOptionalParams): Promise<Models.FindInstancesResponse>;
  /**
   * @param callback The callback
   */
  findInstances(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findInstances(options: Models.CatalyticSDKAPIFindInstancesOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findInstances(options?: Models.CatalyticSDKAPIFindInstancesOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindInstancesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findInstancesOperationSpec,
      callback) as Promise<Models.FindInstancesResponse>;
  }

  /**
   * @summary Starts a new Instance
   * @param [options] The optional parameters
   * @returns Promise<Models.StartInstanceResponse>
   */
  startInstance(options?: Models.CatalyticSDKAPIStartInstanceOptionalParams): Promise<Models.StartInstanceResponse>;
  /**
   * @param callback The callback
   */
  startInstance(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  startInstance(options: Models.CatalyticSDKAPIStartInstanceOptionalParams, callback: msRest.ServiceCallback<any>): void;
  startInstance(options?: Models.CatalyticSDKAPIStartInstanceOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.StartInstanceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      startInstanceOperationSpec,
      callback) as Promise<Models.StartInstanceResponse>;
  }

  /**
   * @summary Gets details of a specific Instance
   * @param id The ID of the Instance to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetInstanceResponse>
   */
  getInstance(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetInstanceResponse>;
  /**
   * @param id The ID of the Instance to get
   * @param callback The callback
   */
  getInstance(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstance(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getInstance(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetInstanceResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getInstanceOperationSpec,
      callback) as Promise<Models.GetInstanceResponse>;
  }

  /**
   * @summary Stops a specific Instance
   * @param id The ID of the Instance to stop
   * @param [options] The optional parameters
   * @returns Promise<Models.StopInstanceResponse>
   */
  stopInstance(id: string, options?: msRest.RequestOptionsBase): Promise<Models.StopInstanceResponse>;
  /**
   * @param id The ID of the Instance to stop
   * @param callback The callback
   */
  stopInstance(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance to stop
   * @param options The optional parameters
   * @param callback The callback
   */
  stopInstance(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  stopInstance(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.StopInstanceResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      stopInstanceOperationSpec,
      callback) as Promise<Models.StopInstanceResponse>;
  }

  /**
   * @summary Find Instance Steps
   * @param instanceId The ID of the Instance
   * @param [options] The optional parameters
   * @returns Promise<Models.FindInstanceStepsResponse>
   */
  findInstanceSteps(instanceId: string, options?: Models.CatalyticSDKAPIFindInstanceStepsOptionalParams): Promise<Models.FindInstanceStepsResponse>;
  /**
   * @param instanceId The ID of the Instance
   * @param callback The callback
   */
  findInstanceSteps(instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param instanceId The ID of the Instance
   * @param options The optional parameters
   * @param callback The callback
   */
  findInstanceSteps(instanceId: string, options: Models.CatalyticSDKAPIFindInstanceStepsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findInstanceSteps(instanceId: string, options?: Models.CatalyticSDKAPIFindInstanceStepsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindInstanceStepsResponse> {
    return this.sendOperationRequest(
      {
        instanceId,
        options
      },
      findInstanceStepsOperationSpec,
      callback) as Promise<Models.FindInstanceStepsResponse>;
  }

  /**
   * @summary Gets details of a specific Instance Step
   * @param id The ID of the Instance Steps to get
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetInstanceStepResponse>
   */
  getInstanceStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetInstanceStepResponse>;
  /**
   * @param id The ID of the Instance Steps to get
   * @param instanceId
   * @param callback The callback
   */
  getInstanceStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Steps to get
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceStep(id: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getInstanceStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetInstanceStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      getInstanceStepOperationSpec,
      callback) as Promise<Models.GetInstanceStepResponse>;
  }

  /**
   * @summary Completes an Instance Step
   * @param id The ID of the Instance Step to complete
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.CompleteStepResponse>
   */
  completeStep(id: string, instanceId: string, options?: Models.CatalyticSDKAPICompleteStepOptionalParams): Promise<Models.CompleteStepResponse>;
  /**
   * @param id The ID of the Instance Step to complete
   * @param instanceId
   * @param callback The callback
   */
  completeStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Step to complete
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  completeStep(id: string, instanceId: string, options: Models.CatalyticSDKAPICompleteStepOptionalParams, callback: msRest.ServiceCallback<any>): void;
  completeStep(id: string, instanceId: string, options?: Models.CatalyticSDKAPICompleteStepOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CompleteStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      completeStepOperationSpec,
      callback) as Promise<Models.CompleteStepResponse>;
  }

  /**
   * @summary Starts a pending Instance Step
   * @param id The ID of the Instance Step to start
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.StartStepResponse>
   */
  startStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.StartStepResponse>;
  /**
   * @param id The ID of the Instance Step to start
   * @param instanceId
   * @param callback The callback
   */
  startStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Step to start
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  startStep(id: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  startStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.StartStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      startStepOperationSpec,
      callback) as Promise<Models.StartStepResponse>;
  }

  /**
   * @summary Snooze a pending Instance Step
   * @param id The ID of the Instance Step to snooze
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.SnoozeStepResponse>
   */
  snoozeStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.SnoozeStepResponse>;
  /**
   * @param id The ID of the Instance Step to snooze
   * @param instanceId
   * @param callback The callback
   */
  snoozeStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Step to snooze
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  snoozeStep(id: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  snoozeStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SnoozeStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      snoozeStepOperationSpec,
      callback) as Promise<Models.SnoozeStepResponse>;
  }

  /**
   * @summary Reassigns a Instance Step
   * @param id The ID of the Instance Step to reassign
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.ReassignStepResponse>
   */
  reassignStep(id: string, instanceId: string, options?: Models.CatalyticSDKAPIReassignStepOptionalParams): Promise<Models.ReassignStepResponse>;
  /**
   * @param id The ID of the Instance Step to reassign
   * @param instanceId
   * @param callback The callback
   */
  reassignStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Step to reassign
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  reassignStep(id: string, instanceId: string, options: Models.CatalyticSDKAPIReassignStepOptionalParams, callback: msRest.ServiceCallback<any>): void;
  reassignStep(id: string, instanceId: string, options?: Models.CatalyticSDKAPIReassignStepOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ReassignStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      reassignStepOperationSpec,
      callback) as Promise<Models.ReassignStepResponse>;
  }

  /**
   * @summary Find Integration
   * @param [options] The optional parameters
   * @returns Promise<Models.FindIntegrationsResponse>
   */
  findIntegrations(options?: Models.CatalyticSDKAPIFindIntegrationsOptionalParams): Promise<Models.FindIntegrationsResponse>;
  /**
   * @param callback The callback
   */
  findIntegrations(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findIntegrations(options: Models.CatalyticSDKAPIFindIntegrationsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findIntegrations(options?: Models.CatalyticSDKAPIFindIntegrationsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindIntegrationsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findIntegrationsOperationSpec,
      callback) as Promise<Models.FindIntegrationsResponse>;
  }

  /**
   * @summary Create a new Integration
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateIntegrationResponse>
   */
  createIntegration(options?: Models.CatalyticSDKAPICreateIntegrationOptionalParams): Promise<Models.CreateIntegrationResponse>;
  /**
   * @param callback The callback
   */
  createIntegration(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createIntegration(options: Models.CatalyticSDKAPICreateIntegrationOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createIntegration(options?: Models.CatalyticSDKAPICreateIntegrationOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateIntegrationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createIntegrationOperationSpec,
      callback) as Promise<Models.CreateIntegrationResponse>;
  }

  /**
   * @summary Gets details of a specific Integration definition
   * @param id The ID of the Integration to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetIntegrationResponse>
   */
  getIntegration(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIntegrationResponse>;
  /**
   * @param id The ID of the Integration to get
   * @param callback The callback
   */
  getIntegration(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Integration to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntegration(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getIntegration(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetIntegrationResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getIntegrationOperationSpec,
      callback) as Promise<Models.GetIntegrationResponse>;
  }

  /**
   * @summary Update an Integration
   * @param id The id of the action to update
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateIntegrationResponse>
   */
  updateIntegration(id: string, options?: Models.CatalyticSDKAPIUpdateIntegrationOptionalParams): Promise<Models.UpdateIntegrationResponse>;
  /**
   * @param id The id of the action to update
   * @param callback The callback
   */
  updateIntegration(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The id of the action to update
   * @param options The optional parameters
   * @param callback The callback
   */
  updateIntegration(id: string, options: Models.CatalyticSDKAPIUpdateIntegrationOptionalParams, callback: msRest.ServiceCallback<any>): void;
  updateIntegration(id: string, options?: Models.CatalyticSDKAPIUpdateIntegrationOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateIntegrationResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      updateIntegrationOperationSpec,
      callback) as Promise<Models.UpdateIntegrationResponse>;
  }

  /**
   * @summary Deletes a specific Integration
   * @param id The ID of the Integration to delete
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteIntegrationResponse>
   */
  deleteIntegration(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteIntegrationResponse>;
  /**
   * @param id The ID of the Integration to delete
   * @param callback The callback
   */
  deleteIntegration(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Integration to delete
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteIntegration(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteIntegration(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeleteIntegrationResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteIntegrationOperationSpec,
      callback) as Promise<Models.DeleteIntegrationResponse>;
  }

  /**
   * @summary Gets details of a specific Integration definition
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetIntegrationUnencodedResponse>
   */
  getIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIntegrationUnencodedResponse>;
  /**
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param callback The callback
   */
  getIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetIntegrationUnencodedResponse> {
    return this.sendOperationRequest(
      {
        integrationName,
        integrationAction,
        integrationVersion,
        options
      },
      getIntegrationUnencodedOperationSpec,
      callback) as Promise<Models.GetIntegrationUnencodedResponse>;
  }

  /**
   * @summary Update an Integration
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateIntegrationUnencodedResponse>
   */
  updateIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options?: Models.CatalyticSDKAPIUpdateIntegrationUnencodedOptionalParams): Promise<Models.UpdateIntegrationUnencodedResponse>;
  /**
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param callback The callback
   */
  updateIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param options The optional parameters
   * @param callback The callback
   */
  updateIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options: Models.CatalyticSDKAPIUpdateIntegrationUnencodedOptionalParams, callback: msRest.ServiceCallback<any>): void;
  updateIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options?: Models.CatalyticSDKAPIUpdateIntegrationUnencodedOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateIntegrationUnencodedResponse> {
    return this.sendOperationRequest(
      {
        integrationName,
        integrationAction,
        integrationVersion,
        options
      },
      updateIntegrationUnencodedOperationSpec,
      callback) as Promise<Models.UpdateIntegrationUnencodedResponse>;
  }

  /**
   * @summary Deletes a specific Integration
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteIntegrationUnencodedResponse>
   */
  deleteIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteIntegrationUnencodedResponse>;
  /**
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param callback The callback
   */
  deleteIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param integrationName The name component of the ID of the Integration to get
   * @param integrationAction The action component of the ID of the Integration to get
   * @param integrationVersion The version component of the ID of the Integration to get
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteIntegrationUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeleteIntegrationUnencodedResponse> {
    return this.sendOperationRequest(
      {
        integrationName,
        integrationAction,
        integrationVersion,
        options
      },
      deleteIntegrationUnencodedOperationSpec,
      callback) as Promise<Models.DeleteIntegrationUnencodedResponse>;
  }

  /**
   * @summary Creates a new Integration Connection
   * @param id The ID of the Integration Definition for which a Connection should be created
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateIntegrationConnectionResponse>
   */
  createIntegrationConnection(id: string, options?: Models.CatalyticSDKAPICreateIntegrationConnectionOptionalParams): Promise<Models.CreateIntegrationConnectionResponse>;
  /**
   * @param id The ID of the Integration Definition for which a Connection should be created
   * @param callback The callback
   */
  createIntegrationConnection(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Integration Definition for which a Connection should be created
   * @param options The optional parameters
   * @param callback The callback
   */
  createIntegrationConnection(id: string, options: Models.CatalyticSDKAPICreateIntegrationConnectionOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createIntegrationConnection(id: string, options?: Models.CatalyticSDKAPICreateIntegrationConnectionOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateIntegrationConnectionResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      createIntegrationConnectionOperationSpec,
      callback) as Promise<Models.CreateIntegrationConnectionResponse>;
  }

  /**
   * @summary Creates a new Integration Connection
   * @param integrationName The name component of the ID of the Integration for which a Connection
   * should be created
   * @param integrationAction The action component of the ID of the Integration for which a
   * Connection should be created
   * @param integrationVersion The version component of the ID of the Integration for which a
   * Connection should be created
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateIntegrationConnectionUnencodedResponse>
   */
  createIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options?: Models.CatalyticSDKAPICreateIntegrationConnectionUnencodedOptionalParams): Promise<Models.CreateIntegrationConnectionUnencodedResponse>;
  /**
   * @param integrationName The name component of the ID of the Integration for which a Connection
   * should be created
   * @param integrationAction The action component of the ID of the Integration for which a
   * Connection should be created
   * @param integrationVersion The version component of the ID of the Integration for which a
   * Connection should be created
   * @param callback The callback
   */
  createIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param integrationName The name component of the ID of the Integration for which a Connection
   * should be created
   * @param integrationAction The action component of the ID of the Integration for which a
   * Connection should be created
   * @param integrationVersion The version component of the ID of the Integration for which a
   * Connection should be created
   * @param options The optional parameters
   * @param callback The callback
   */
  createIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options: Models.CatalyticSDKAPICreateIntegrationConnectionUnencodedOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, options?: Models.CatalyticSDKAPICreateIntegrationConnectionUnencodedOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateIntegrationConnectionUnencodedResponse> {
    return this.sendOperationRequest(
      {
        integrationName,
        integrationAction,
        integrationVersion,
        options
      },
      createIntegrationConnectionUnencodedOperationSpec,
      callback) as Promise<Models.CreateIntegrationConnectionUnencodedResponse>;
  }

  /**
   * @summary Get an Integration Connection by Id
   * @param integrationId The ID of the Integration to which the Integration Connection belongs
   * @param id The ID of the Integration Definition to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetIntegrationConnectionResponse>
   */
  getIntegrationConnection(integrationId: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIntegrationConnectionResponse>;
  /**
   * @param integrationId The ID of the Integration to which the Integration Connection belongs
   * @param id The ID of the Integration Definition to get
   * @param callback The callback
   */
  getIntegrationConnection(integrationId: string, id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param integrationId The ID of the Integration to which the Integration Connection belongs
   * @param id The ID of the Integration Definition to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntegrationConnection(integrationId: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getIntegrationConnection(integrationId: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetIntegrationConnectionResponse> {
    return this.sendOperationRequest(
      {
        integrationId,
        id,
        options
      },
      getIntegrationConnectionOperationSpec,
      callback) as Promise<Models.GetIntegrationConnectionResponse>;
  }

  /**
   * @summary Delete an Integration Connection by Id
   * @param integrationId The ID of the Integration to which the Integration Connection belongs
   * @param id The ID of the Integration Definition to delete
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteIntegrationConnectionResponse>
   */
  deleteIntegrationConnection(integrationId: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteIntegrationConnectionResponse>;
  /**
   * @param integrationId The ID of the Integration to which the Integration Connection belongs
   * @param id The ID of the Integration Definition to delete
   * @param callback The callback
   */
  deleteIntegrationConnection(integrationId: string, id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param integrationId The ID of the Integration to which the Integration Connection belongs
   * @param id The ID of the Integration Definition to delete
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteIntegrationConnection(integrationId: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteIntegrationConnection(integrationId: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeleteIntegrationConnectionResponse> {
    return this.sendOperationRequest(
      {
        integrationId,
        id,
        options
      },
      deleteIntegrationConnectionOperationSpec,
      callback) as Promise<Models.DeleteIntegrationConnectionResponse>;
  }

  /**
   * @summary Get an Integration Connection by Id
   * @param integrationName The name component of the ID of the Integration to which the Integration
   * Connection belongs
   * @param integrationAction The action component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param integrationVersion The version component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param id The ID of the Integration Definition to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetIntegrationConnectionUnencodedResponse>
   */
  getIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIntegrationConnectionUnencodedResponse>;
  /**
   * @param integrationName The name component of the ID of the Integration to which the Integration
   * Connection belongs
   * @param integrationAction The action component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param integrationVersion The version component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param id The ID of the Integration Definition to get
   * @param callback The callback
   */
  getIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param integrationName The name component of the ID of the Integration to which the Integration
   * Connection belongs
   * @param integrationAction The action component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param integrationVersion The version component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param id The ID of the Integration Definition to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetIntegrationConnectionUnencodedResponse> {
    return this.sendOperationRequest(
      {
        integrationName,
        integrationAction,
        integrationVersion,
        id,
        options
      },
      getIntegrationConnectionUnencodedOperationSpec,
      callback) as Promise<Models.GetIntegrationConnectionUnencodedResponse>;
  }

  /**
   * @summary Delete an Integration Connection by Id
   * @param integrationName The name component of the ID of the Integration to which the Integration
   * Connection belongs
   * @param integrationAction The action component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param integrationVersion The version component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param id The ID of the Integration Definition to delete
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteIntegrationConnectionUnencodedResponse>
   */
  deleteIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteIntegrationConnectionUnencodedResponse>;
  /**
   * @param integrationName The name component of the ID of the Integration to which the Integration
   * Connection belongs
   * @param integrationAction The action component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param integrationVersion The version component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param id The ID of the Integration Definition to delete
   * @param callback The callback
   */
  deleteIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param integrationName The name component of the ID of the Integration to which the Integration
   * Connection belongs
   * @param integrationAction The action component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param integrationVersion The version component of the ID of the Integration to which the
   * Integration Connection belongs
   * @param id The ID of the Integration Definition to delete
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteIntegrationConnectionUnencoded(integrationName: string, integrationAction: string, integrationVersion: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeleteIntegrationConnectionUnencodedResponse> {
    return this.sendOperationRequest(
      {
        integrationName,
        integrationAction,
        integrationVersion,
        id,
        options
      },
      deleteIntegrationConnectionUnencodedOperationSpec,
      callback) as Promise<Models.DeleteIntegrationConnectionUnencodedResponse>;
  }

  /**
   * @summary Gets details of a specific User
   * @param id The ID or username of the User to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserResponse>
   */
  getUser(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetUserResponse>;
  /**
   * @param id The ID or username of the User to get
   * @param callback The callback
   */
  getUser(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID or username of the User to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getUser(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getUser(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetUserResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getUserOperationSpec,
      callback) as Promise<Models.GetUserResponse>;
  }

  /**
   * @summary List all users on team
   * @param [options] The optional parameters
   * @returns Promise<Models.FindUsersResponse>
   */
  findUsers(options?: Models.CatalyticSDKAPIFindUsersOptionalParams): Promise<Models.FindUsersResponse>;
  /**
   * @param callback The callback
   */
  findUsers(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findUsers(options: Models.CatalyticSDKAPIFindUsersOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findUsers(options?: Models.CatalyticSDKAPIFindUsersOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindUsersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findUsersOperationSpec,
      callback) as Promise<Models.FindUsersResponse>;
  }

  /**
   * @summary Find Workflows
   * @param [options] The optional parameters
   * @returns Promise<Models.FindWorkflowsResponse>
   */
  findWorkflows(options?: Models.CatalyticSDKAPIFindWorkflowsOptionalParams): Promise<Models.FindWorkflowsResponse>;
  /**
   * @param callback The callback
   */
  findWorkflows(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findWorkflows(options: Models.CatalyticSDKAPIFindWorkflowsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findWorkflows(options?: Models.CatalyticSDKAPIFindWorkflowsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindWorkflowsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findWorkflowsOperationSpec,
      callback) as Promise<Models.FindWorkflowsResponse>;
  }

  /**
   * @summary Gets details of a specific Workflow process template
   * @param id The ID of the Workflow to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetWorkflowResponse>
   */
  getWorkflow(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetWorkflowResponse>;
  /**
   * @param id The ID of the Workflow to get
   * @param callback The callback
   */
  getWorkflow(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Workflow to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkflow(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getWorkflow(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetWorkflowResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getWorkflowOperationSpec,
      callback) as Promise<Models.GetWorkflowResponse>;
  }

  /**
   * @summary Imports a new Workflow
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportWorkflowResponse>
   */
  importWorkflow(options?: Models.CatalyticSDKAPIImportWorkflowOptionalParams): Promise<Models.ImportWorkflowResponse>;
  /**
   * @param callback The callback
   */
  importWorkflow(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  importWorkflow(options: Models.CatalyticSDKAPIImportWorkflowOptionalParams, callback: msRest.ServiceCallback<any>): void;
  importWorkflow(options?: Models.CatalyticSDKAPIImportWorkflowOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ImportWorkflowResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      importWorkflowOperationSpec,
      callback) as Promise<Models.ImportWorkflowResponse>;
  }

  /**
   * @summary Fetch an existing WorkflowImport request
   * @param id The Workflow Import Id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetWorkflowImportResponse>
   */
  getWorkflowImport(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetWorkflowImportResponse>;
  /**
   * @param id The Workflow Import Id
   * @param callback The callback
   */
  getWorkflowImport(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The Workflow Import Id
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkflowImport(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getWorkflowImport(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetWorkflowImportResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getWorkflowImportOperationSpec,
      callback) as Promise<Models.GetWorkflowImportResponse>;
  }

  /**
   * @summary Exports an existing Workflow
   * @param id The ID of the Workflow to export
   * @param [options] The optional parameters
   * @returns Promise<Models.ExportWorkflowResponse>
   */
  exportWorkflow(id: string, options?: Models.CatalyticSDKAPIExportWorkflowOptionalParams): Promise<Models.ExportWorkflowResponse>;
  /**
   * @param id The ID of the Workflow to export
   * @param callback The callback
   */
  exportWorkflow(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Workflow to export
   * @param options The optional parameters
   * @param callback The callback
   */
  exportWorkflow(id: string, options: Models.CatalyticSDKAPIExportWorkflowOptionalParams, callback: msRest.ServiceCallback<any>): void;
  exportWorkflow(id: string, options?: Models.CatalyticSDKAPIExportWorkflowOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ExportWorkflowResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      exportWorkflowOperationSpec,
      callback) as Promise<Models.ExportWorkflowResponse>;
  }

  /**
   * @summary Fetch an existing WorkflowExport request
   * @param id The Workflow Export Id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetWorkflowExportResponse>
   */
  getWorkflowExport(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetWorkflowExportResponse>;
  /**
   * @param id The Workflow Export Id
   * @param callback The callback
   */
  getWorkflowExport(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The Workflow Export Id
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkflowExport(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getWorkflowExport(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetWorkflowExportResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getWorkflowExportOperationSpec,
      callback) as Promise<Models.GetWorkflowExportResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const findAccessTokensOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/access-tokens",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.participatingUsers,
    Parameters.startedBefore,
    Parameters.startedAfter,
    Parameters.endedBefore,
    Parameters.endedAfter,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AccessTokensPage
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    403: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/access-tokens/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    403: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const revokeAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/access-tokens/{id}:revoke",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    403: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/auth",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.AccessTokenCreationRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.AccessToken
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createAndApproveAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/auth/create-and-approve",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.AccessTokenCreationWithEmailAndPasswordRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.AccessToken
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const waitForAccessTokenApprovalOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/auth/wait-for-approval",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.WaitForAccessTokenApprovalRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getDataTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/tables/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataTable
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const downloadDataTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/tables/{id}/download",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.format
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const replaceDataTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/tables/{id}:replace",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.headerRow,
    Parameters.sheetNumber
  ],
  formDataParameters: [
    Parameters.files
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.DataTable
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const uploadDataTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/tables:upload",
  queryParameters: [
    Parameters.tableName,
    Parameters.headerRow,
    Parameters.sheetNumber
  ],
  formDataParameters: [
    Parameters.files
  ],
  contentType: "multipart/form-data",
  responses: {
    201: {
      bodyMapper: Mappers.DataTable
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findDataTablesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/tables",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.participatingUsers,
    Parameters.startedBefore,
    Parameters.startedAfter,
    Parameters.endedBefore,
    Parameters.endedAfter,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataTablesPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/files/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileMetadata
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const downloadFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/files/{id}/download",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const uploadFilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/files:upload",
  formDataParameters: [
    Parameters.files
  ],
  contentType: "multipart/form-data",
  responses: {
    201: {
      bodyMapper: Mappers.FileMetadataPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findInstancesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/instances",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.participatingUsers,
    Parameters.startedBefore,
    Parameters.startedAfter,
    Parameters.endedBefore,
    Parameters.endedAfter,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstancesPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const startInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/instances",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.StartInstanceRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Instance
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/instances/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Instance
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const stopInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/instances/{id}:stop",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Instance
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findInstanceStepsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/instances/{instanceId}/steps",
  urlParameters: [
    Parameters.instanceId
  ],
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.participatingUsers,
    Parameters.startedBefore,
    Parameters.startedAfter,
    Parameters.endedBefore,
    Parameters.endedAfter,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStepsPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getInstanceStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/instances/{instanceId}/steps/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const completeStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/instances/{instanceId}/steps/{id}:complete",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.CompleteStepRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    409: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const startStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/instances/{instanceId}/steps/{id}:start",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    409: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const snoozeStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/instances/{instanceId}/steps/{id}:snooze",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    409: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const reassignStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/instances/{instanceId}/steps/{id}:reassign",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.ReassignStepRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    409: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findIntegrationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/integrations",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.participatingUsers,
    Parameters.startedBefore,
    Parameters.startedAfter,
    Parameters.endedBefore,
    Parameters.endedAfter,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationsPage
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createIntegrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/integrations",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.IntegrationCreationRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Integration
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getIntegrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/integrations/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Integration
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const updateIntegrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0.3/api/integrations/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.IntegrationUpdateRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Integration
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const deleteIntegrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0.3/api/integrations/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getIntegrationUnencodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}",
  urlParameters: [
    Parameters.integrationName,
    Parameters.integrationAction,
    Parameters.integrationVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Integration
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const updateIntegrationUnencodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0.3/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}",
  urlParameters: [
    Parameters.integrationName,
    Parameters.integrationAction,
    Parameters.integrationVersion
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.IntegrationUpdateRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Integration
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const deleteIntegrationUnencodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0.3/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}",
  urlParameters: [
    Parameters.integrationName,
    Parameters.integrationAction,
    Parameters.integrationVersion
  ],
  responses: {
    204: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createIntegrationConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/integrations/{id}/connections",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.IntegrationConnectionCreationRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.IntegrationConnection
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createIntegrationConnectionUnencodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}/connections",
  urlParameters: [
    Parameters.integrationName,
    Parameters.integrationAction,
    Parameters.integrationVersion
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.IntegrationConnectionCreationRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.IntegrationConnection
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getIntegrationConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/integrations/{integrationId}/connections/{id}",
  urlParameters: [
    Parameters.integrationId,
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationConnection
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    403: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const deleteIntegrationConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0.3/api/integrations/{integrationId}/connections/{id}",
  urlParameters: [
    Parameters.integrationId,
    Parameters.id
  ],
  responses: {
    204: {
      bodyMapper: Mappers.IntegrationConnection
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    403: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getIntegrationConnectionUnencodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}/connections/{id}",
  urlParameters: [
    Parameters.integrationName,
    Parameters.integrationAction,
    Parameters.integrationVersion,
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationConnection
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    403: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const deleteIntegrationConnectionUnencodedOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0.3/api/integrations/{integrationName}/{integrationAction}/{integrationVersion}/connections/{id}",
  urlParameters: [
    Parameters.integrationName,
    Parameters.integrationAction,
    Parameters.integrationVersion,
    Parameters.id
  ],
  responses: {
    204: {
      bodyMapper: Mappers.IntegrationConnection
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    403: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/users/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findUsersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/users",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.participatingUsers,
    Parameters.startedBefore,
    Parameters.startedAfter,
    Parameters.endedBefore,
    Parameters.endedAfter,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsersPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findWorkflowsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/workflows",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.participatingUsers,
    Parameters.startedBefore,
    Parameters.startedAfter,
    Parameters.endedBefore,
    Parameters.endedAfter,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowsPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getWorkflowOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/workflows/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const importWorkflowOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/workflows:import",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.WorkflowImportRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.WorkflowImport
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getWorkflowImportOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/workflows/imports/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowImport
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const exportWorkflowOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0.3/api/workflows/{id}:export",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.WorkflowExportRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.WorkflowExport
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getWorkflowExportOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0.3/api/workflows/exports/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowExport
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

export {
  CatalyticSDKAPI,
  CatalyticSDKAPIContext,
  Models as CatalyticSDKAPIModels,
  Mappers as CatalyticSDKAPIMappers
};
