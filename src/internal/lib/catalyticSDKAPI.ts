/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { CatalyticSDKAPIContext } from "./catalyticSDKAPIContext";

class CatalyticSDKAPI extends CatalyticSDKAPIContext {
  /**
   * Initializes a new instance of the CatalyticSDKAPI class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.CatalyticSDKAPIOptions) {
    super(options);
  }

  /**
   * @summary Find Actions
   * @param [options] The optional parameters
   * @returns Promise<Models.FindActionsResponse>
   */
  findActions(options?: Models.CatalyticSDKAPIFindActionsOptionalParams): Promise<Models.FindActionsResponse>;
  /**
   * @param callback The callback
   */
  findActions(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findActions(options: Models.CatalyticSDKAPIFindActionsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findActions(options?: Models.CatalyticSDKAPIFindActionsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindActionsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findActionsOperationSpec,
      callback) as Promise<Models.FindActionsResponse>;
  }

  /**
   * @summary Define a new Action
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateActionResponse>
   */
  createAction(options?: Models.CatalyticSDKAPICreateActionOptionalParams): Promise<Models.CreateActionResponse>;
  /**
   * @param callback The callback
   */
  createAction(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createAction(options: Models.CatalyticSDKAPICreateActionOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createAction(options?: Models.CatalyticSDKAPICreateActionOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateActionResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createActionOperationSpec,
      callback) as Promise<Models.CreateActionResponse>;
  }

  /**
   * @summary Gets details of a specific Action definition
   * @param id The ID of the Action to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetActionResponse>
   */
  getAction(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetActionResponse>;
  /**
   * @param id The ID of the Action to get
   * @param callback The callback
   */
  getAction(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Action to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getAction(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAction(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetActionResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getActionOperationSpec,
      callback) as Promise<Models.GetActionResponse>;
  }

  /**
   * @summary Deletes a specific Action definition
   * @param id The ID of the Action to delete
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteActionResponse>
   */
  deleteAction(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteActionResponse>;
  /**
   * @param id The ID of the Action to delete
   * @param callback The callback
   */
  deleteAction(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Action to delete
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAction(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteAction(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeleteActionResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteActionOperationSpec,
      callback) as Promise<Models.DeleteActionResponse>;
  }

  /**
   * @summary Update an Action
   * @param id The id of the action to update
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateActionResponse>
   */
  updateAction(id: string, options?: Models.CatalyticSDKAPIUpdateActionOptionalParams): Promise<Models.UpdateActionResponse>;
  /**
   * @param id The id of the action to update
   * @param callback The callback
   */
  updateAction(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The id of the action to update
   * @param options The optional parameters
   * @param callback The callback
   */
  updateAction(id: string, options: Models.CatalyticSDKAPIUpdateActionOptionalParams, callback: msRest.ServiceCallback<any>): void;
  updateAction(id: string, options?: Models.CatalyticSDKAPIUpdateActionOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateActionResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      updateActionOperationSpec,
      callback) as Promise<Models.UpdateActionResponse>;
  }

  /**
   * @summary Find ActionWorkers
   * @param [options] The optional parameters
   * @returns Promise<Models.FindActionWorkersResponse>
   */
  findActionWorkers(options?: Models.CatalyticSDKAPIFindActionWorkersOptionalParams): Promise<Models.FindActionWorkersResponse>;
  /**
   * @param callback The callback
   */
  findActionWorkers(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findActionWorkers(options: Models.CatalyticSDKAPIFindActionWorkersOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findActionWorkers(options?: Models.CatalyticSDKAPIFindActionWorkersOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindActionWorkersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findActionWorkersOperationSpec,
      callback) as Promise<Models.FindActionWorkersResponse>;
  }

  /**
   * @summary Define a new Action Worker
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateActionWorkerResponse>
   */
  createActionWorker(options?: Models.CatalyticSDKAPICreateActionWorkerOptionalParams): Promise<Models.CreateActionWorkerResponse>;
  /**
   * @param callback The callback
   */
  createActionWorker(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createActionWorker(options: Models.CatalyticSDKAPICreateActionWorkerOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createActionWorker(options?: Models.CatalyticSDKAPICreateActionWorkerOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateActionWorkerResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createActionWorkerOperationSpec,
      callback) as Promise<Models.CreateActionWorkerResponse>;
  }

  /**
   * @summary Gets details of a specific Action Worker
   * @param id The ID of the Action Worker to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetActionWorkerResponse>
   */
  getActionWorker(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetActionWorkerResponse>;
  /**
   * @param id The ID of the Action Worker to get
   * @param callback The callback
   */
  getActionWorker(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Action Worker to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getActionWorker(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getActionWorker(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetActionWorkerResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getActionWorkerOperationSpec,
      callback) as Promise<Models.GetActionWorkerResponse>;
  }

  /**
   * @summary Deletes a specific Action Worker
   * @param id The ID of the Action Worker to delete
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteActionWorkerResponse>
   */
  deleteActionWorker(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteActionWorkerResponse>;
  /**
   * @param id The ID of the Action Worker to delete
   * @param callback The callback
   */
  deleteActionWorker(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Action Worker to delete
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteActionWorker(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteActionWorker(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeleteActionWorkerResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteActionWorkerOperationSpec,
      callback) as Promise<Models.DeleteActionWorkerResponse>;
  }

  /**
   * @summary Update an Action Worker
   * @param id The id of the action worker to update
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateActionWorkerResponse>
   */
  updateActionWorker(id: string, options?: Models.CatalyticSDKAPIUpdateActionWorkerOptionalParams): Promise<Models.UpdateActionWorkerResponse>;
  /**
   * @param id The id of the action worker to update
   * @param callback The callback
   */
  updateActionWorker(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The id of the action worker to update
   * @param options The optional parameters
   * @param callback The callback
   */
  updateActionWorker(id: string, options: Models.CatalyticSDKAPIUpdateActionWorkerOptionalParams, callback: msRest.ServiceCallback<any>): void;
  updateActionWorker(id: string, options?: Models.CatalyticSDKAPIUpdateActionWorkerOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateActionWorkerResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      updateActionWorkerOperationSpec,
      callback) as Promise<Models.UpdateActionWorkerResponse>;
  }

  /**
   * @summary Create a new Developer Key
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateDeveloperKeyResponse>
   */
  createDeveloperKey(options?: Models.CatalyticSDKAPICreateDeveloperKeyOptionalParams): Promise<Models.CreateDeveloperKeyResponse>;
  /**
   * @param callback The callback
   */
  createDeveloperKey(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createDeveloperKey(options: Models.CatalyticSDKAPICreateDeveloperKeyOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createDeveloperKey(options?: Models.CatalyticSDKAPICreateDeveloperKeyOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateDeveloperKeyResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createDeveloperKeyOperationSpec,
      callback) as Promise<Models.CreateDeveloperKeyResponse>;
  }

  /**
   * @summary Wait until Developer Key is in approved state, the activate Developer Key
   * @param [options] The optional parameters
   * @returns Promise<Models.WaitForDeveloperKeyActivationResponse>
   */
  waitForDeveloperKeyActivation(options?: Models.CatalyticSDKAPIWaitForDeveloperKeyActivationOptionalParams): Promise<Models.WaitForDeveloperKeyActivationResponse>;
  /**
   * @param callback The callback
   */
  waitForDeveloperKeyActivation(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  waitForDeveloperKeyActivation(options: Models.CatalyticSDKAPIWaitForDeveloperKeyActivationOptionalParams, callback: msRest.ServiceCallback<any>): void;
  waitForDeveloperKeyActivation(options?: Models.CatalyticSDKAPIWaitForDeveloperKeyActivationOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WaitForDeveloperKeyActivationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      waitForDeveloperKeyActivationOperationSpec,
      callback) as Promise<Models.WaitForDeveloperKeyActivationResponse>;
  }

  /**
   * @summary Get metadata for a Data Table by ID
   * @param id The ID of the Data Table to get metadata for
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDataTableResponse>
   */
  getDataTable(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetDataTableResponse>;
  /**
   * @param id The ID of the Data Table to get metadata for
   * @param callback The callback
   */
  getDataTable(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Data Table to get metadata for
   * @param options The optional parameters
   * @param callback The callback
   */
  getDataTable(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getDataTable(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetDataTableResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getDataTableOperationSpec,
      callback) as Promise<Models.GetDataTableResponse>;
  }

  /**
   * @summary Download a Data Table as a CSV or Excel file
   * @param id The ID of the Data Table to download
   * @param [options] The optional parameters
   * @returns Promise<Models.DownloadDataTableResponse>
   */
  downloadDataTable(id: string, options?: Models.CatalyticSDKAPIDownloadDataTableOptionalParams): Promise<Models.DownloadDataTableResponse>;
  /**
   * @param id The ID of the Data Table to download
   * @param callback The callback
   */
  downloadDataTable(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Data Table to download
   * @param options The optional parameters
   * @param callback The callback
   */
  downloadDataTable(id: string, options: Models.CatalyticSDKAPIDownloadDataTableOptionalParams, callback: msRest.ServiceCallback<any>): void;
  downloadDataTable(id: string, options?: Models.CatalyticSDKAPIDownloadDataTableOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DownloadDataTableResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      downloadDataTableOperationSpec,
      callback) as Promise<Models.DownloadDataTableResponse>;
  }

  /**
   * @summary Upload a csv or excel file to create a data table
   * @param [options] The optional parameters
   * @returns Promise<Models.UploadDataTableResponse>
   */
  uploadDataTable(options?: Models.CatalyticSDKAPIUploadDataTableOptionalParams): Promise<Models.UploadDataTableResponse>;
  /**
   * @param callback The callback
   */
  uploadDataTable(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadDataTable(options: Models.CatalyticSDKAPIUploadDataTableOptionalParams, callback: msRest.ServiceCallback<any>): void;
  uploadDataTable(options?: Models.CatalyticSDKAPIUploadDataTableOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UploadDataTableResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      uploadDataTableOperationSpec,
      callback) as Promise<Models.UploadDataTableResponse>;
  }

  /**
   * @summary Find Data Tables
   * @param [options] The optional parameters
   * @returns Promise<Models.FindDataTablesResponse>
   */
  findDataTables(options?: Models.CatalyticSDKAPIFindDataTablesOptionalParams): Promise<Models.FindDataTablesResponse>;
  /**
   * @param callback The callback
   */
  findDataTables(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findDataTables(options: Models.CatalyticSDKAPIFindDataTablesOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findDataTables(options?: Models.CatalyticSDKAPIFindDataTablesOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindDataTablesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findDataTablesOperationSpec,
      callback) as Promise<Models.FindDataTablesResponse>;
  }

  /**
   * @summary Find Developer Keys
   * @param [options] The optional parameters
   * @returns Promise<Models.FindDeveloperKeysResponse>
   */
  findDeveloperKeys(options?: Models.CatalyticSDKAPIFindDeveloperKeysOptionalParams): Promise<Models.FindDeveloperKeysResponse>;
  /**
   * @param callback The callback
   */
  findDeveloperKeys(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findDeveloperKeys(options: Models.CatalyticSDKAPIFindDeveloperKeysOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findDeveloperKeys(options?: Models.CatalyticSDKAPIFindDeveloperKeysOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindDeveloperKeysResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findDeveloperKeysOperationSpec,
      callback) as Promise<Models.FindDeveloperKeysResponse>;
  }

  /**
   * @summary Revoke Developer Key
   * @param accessIdentifier The public Access Identifier of the Developer Key
   * @param [options] The optional parameters
   * @returns Promise<Models.RevokeDeveloperKeyResponse>
   */
  revokeDeveloperKey(accessIdentifier: string, options?: msRest.RequestOptionsBase): Promise<Models.RevokeDeveloperKeyResponse>;
  /**
   * @param accessIdentifier The public Access Identifier of the Developer Key
   * @param callback The callback
   */
  revokeDeveloperKey(accessIdentifier: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param accessIdentifier The public Access Identifier of the Developer Key
   * @param options The optional parameters
   * @param callback The callback
   */
  revokeDeveloperKey(accessIdentifier: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  revokeDeveloperKey(accessIdentifier: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.RevokeDeveloperKeyResponse> {
    return this.sendOperationRequest(
      {
        accessIdentifier,
        options
      },
      revokeDeveloperKeyOperationSpec,
      callback) as Promise<Models.RevokeDeveloperKeyResponse>;
  }

  /**
   * @summary Get metadata of a file
   * @param id The ID of the File to get metadata for
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFileResponse>
   */
  getFile(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetFileResponse>;
  /**
   * @param id The ID of the File to get metadata for
   * @param callback The callback
   */
  getFile(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the File to get metadata for
   * @param options The optional parameters
   * @param callback The callback
   */
  getFile(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getFile(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetFileResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getFileOperationSpec,
      callback) as Promise<Models.GetFileResponse>;
  }

  /**
   * @summary Download a file
   * @param id The ID of the file to download
   * @param [options] The optional parameters
   * @returns Promise<Models.DownloadFileResponse>
   */
  downloadFile(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DownloadFileResponse>;
  /**
   * @param id The ID of the file to download
   * @param callback The callback
   */
  downloadFile(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the file to download
   * @param options The optional parameters
   * @param callback The callback
   */
  downloadFile(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  downloadFile(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DownloadFileResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      downloadFileOperationSpec,
      callback) as Promise<Models.DownloadFileResponse>;
  }

  /**
   * @summary Upload a file
   * @param [options] The optional parameters
   * @returns Promise<Models.UploadFilesResponse>
   */
  uploadFiles(options?: Models.CatalyticSDKAPIUploadFilesOptionalParams): Promise<Models.UploadFilesResponse>;
  /**
   * @param callback The callback
   */
  uploadFiles(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadFiles(options: Models.CatalyticSDKAPIUploadFilesOptionalParams, callback: msRest.ServiceCallback<any>): void;
  uploadFiles(options?: Models.CatalyticSDKAPIUploadFilesOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UploadFilesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      uploadFilesOperationSpec,
      callback) as Promise<Models.UploadFilesResponse>;
  }

  /**
   * @summary Find Files
   * @param [options] The optional parameters
   * @returns Promise<Models.FindFilesResponse>
   */
  findFiles(options?: Models.CatalyticSDKAPIFindFilesOptionalParams): Promise<Models.FindFilesResponse>;
  /**
   * @param callback The callback
   */
  findFiles(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findFiles(options: Models.CatalyticSDKAPIFindFilesOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findFiles(options?: Models.CatalyticSDKAPIFindFilesOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindFilesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findFilesOperationSpec,
      callback) as Promise<Models.FindFilesResponse>;
  }

  /**
   * @summary Find Instances
   * @param [options] The optional parameters
   * @returns Promise<Models.FindInstancesResponse>
   */
  findInstances(options?: Models.CatalyticSDKAPIFindInstancesOptionalParams): Promise<Models.FindInstancesResponse>;
  /**
   * @param callback The callback
   */
  findInstances(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findInstances(options: Models.CatalyticSDKAPIFindInstancesOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findInstances(options?: Models.CatalyticSDKAPIFindInstancesOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindInstancesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findInstancesOperationSpec,
      callback) as Promise<Models.FindInstancesResponse>;
  }

  /**
   * @summary Starts a new Instance
   * @param [options] The optional parameters
   * @returns Promise<Models.StartInstanceResponse>
   */
  startInstance(options?: Models.CatalyticSDKAPIStartInstanceOptionalParams): Promise<Models.StartInstanceResponse>;
  /**
   * @param callback The callback
   */
  startInstance(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  startInstance(options: Models.CatalyticSDKAPIStartInstanceOptionalParams, callback: msRest.ServiceCallback<any>): void;
  startInstance(options?: Models.CatalyticSDKAPIStartInstanceOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.StartInstanceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      startInstanceOperationSpec,
      callback) as Promise<Models.StartInstanceResponse>;
  }

  /**
   * @summary Gets details of a specific Instance
   * @param id The ID of the Instance to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetInstanceResponse>
   */
  getInstance(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetInstanceResponse>;
  /**
   * @param id The ID of the Instance to get
   * @param callback The callback
   */
  getInstance(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstance(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getInstance(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetInstanceResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getInstanceOperationSpec,
      callback) as Promise<Models.GetInstanceResponse>;
  }

  /**
   * @summary Stops a specific Instance
   * @param id The ID of the Instance to stop
   * @param [options] The optional parameters
   * @returns Promise<Models.StopInstanceResponse>
   */
  stopInstance(id: string, options?: msRest.RequestOptionsBase): Promise<Models.StopInstanceResponse>;
  /**
   * @param id The ID of the Instance to stop
   * @param callback The callback
   */
  stopInstance(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance to stop
   * @param options The optional parameters
   * @param callback The callback
   */
  stopInstance(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  stopInstance(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.StopInstanceResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      stopInstanceOperationSpec,
      callback) as Promise<Models.StopInstanceResponse>;
  }

  /**
   * @summary Find Instance Steps
   * @param instanceId The ID of the Instance
   * @param [options] The optional parameters
   * @returns Promise<Models.FindInstanceStepsResponse>
   */
  findInstanceSteps(instanceId: string, options?: Models.CatalyticSDKAPIFindInstanceStepsOptionalParams): Promise<Models.FindInstanceStepsResponse>;
  /**
   * @param instanceId The ID of the Instance
   * @param callback The callback
   */
  findInstanceSteps(instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param instanceId The ID of the Instance
   * @param options The optional parameters
   * @param callback The callback
   */
  findInstanceSteps(instanceId: string, options: Models.CatalyticSDKAPIFindInstanceStepsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findInstanceSteps(instanceId: string, options?: Models.CatalyticSDKAPIFindInstanceStepsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindInstanceStepsResponse> {
    return this.sendOperationRequest(
      {
        instanceId,
        options
      },
      findInstanceStepsOperationSpec,
      callback) as Promise<Models.FindInstanceStepsResponse>;
  }

  /**
   * @summary Gets details of a specific Instance Step
   * @param id The ID of the Instance Steps to get
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetInstanceStepResponse>
   */
  getInstanceStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetInstanceStepResponse>;
  /**
   * @param id The ID of the Instance Steps to get
   * @param instanceId
   * @param callback The callback
   */
  getInstanceStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Steps to get
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceStep(id: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getInstanceStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetInstanceStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      getInstanceStepOperationSpec,
      callback) as Promise<Models.GetInstanceStepResponse>;
  }

  /**
   * @summary Completes an Instance Step
   * @param id The ID of the Instance Step to complete
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.CompleteStepResponse>
   */
  completeStep(id: string, instanceId: string, options?: Models.CatalyticSDKAPICompleteStepOptionalParams): Promise<Models.CompleteStepResponse>;
  /**
   * @param id The ID of the Instance Step to complete
   * @param instanceId
   * @param callback The callback
   */
  completeStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Step to complete
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  completeStep(id: string, instanceId: string, options: Models.CatalyticSDKAPICompleteStepOptionalParams, callback: msRest.ServiceCallback<any>): void;
  completeStep(id: string, instanceId: string, options?: Models.CatalyticSDKAPICompleteStepOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CompleteStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      completeStepOperationSpec,
      callback) as Promise<Models.CompleteStepResponse>;
  }

  /**
   * @summary Starts a pending Instance Step
   * @param id The ID of the Instance Step to start
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.StartStepResponse>
   */
  startStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.StartStepResponse>;
  /**
   * @param id The ID of the Instance Step to start
   * @param instanceId
   * @param callback The callback
   */
  startStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Step to start
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  startStep(id: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  startStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.StartStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      startStepOperationSpec,
      callback) as Promise<Models.StartStepResponse>;
  }

  /**
   * @summary Snooze a pending Instance Step
   * @param id The ID of the Instance Step to snooze
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.SnoozeStepResponse>
   */
  snoozeStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.SnoozeStepResponse>;
  /**
   * @param id The ID of the Instance Step to snooze
   * @param instanceId
   * @param callback The callback
   */
  snoozeStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Step to snooze
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  snoozeStep(id: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  snoozeStep(id: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SnoozeStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      snoozeStepOperationSpec,
      callback) as Promise<Models.SnoozeStepResponse>;
  }

  /**
   * @summary Reassigns a Instance Step
   * @param id The ID of the Instance Step to reassign
   * @param instanceId
   * @param [options] The optional parameters
   * @returns Promise<Models.ReassignStepResponse>
   */
  reassignStep(id: string, instanceId: string, options?: Models.CatalyticSDKAPIReassignStepOptionalParams): Promise<Models.ReassignStepResponse>;
  /**
   * @param id The ID of the Instance Step to reassign
   * @param instanceId
   * @param callback The callback
   */
  reassignStep(id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Instance Step to reassign
   * @param instanceId
   * @param options The optional parameters
   * @param callback The callback
   */
  reassignStep(id: string, instanceId: string, options: Models.CatalyticSDKAPIReassignStepOptionalParams, callback: msRest.ServiceCallback<any>): void;
  reassignStep(id: string, instanceId: string, options?: Models.CatalyticSDKAPIReassignStepOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ReassignStepResponse> {
    return this.sendOperationRequest(
      {
        id,
        instanceId,
        options
      },
      reassignStepOperationSpec,
      callback) as Promise<Models.ReassignStepResponse>;
  }

  /**
   * @summary Find Pushbots
   * @param [options] The optional parameters
   * @returns Promise<Models.FindPushbotsResponse>
   */
  findPushbots(options?: Models.CatalyticSDKAPIFindPushbotsOptionalParams): Promise<Models.FindPushbotsResponse>;
  /**
   * @param callback The callback
   */
  findPushbots(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findPushbots(options: Models.CatalyticSDKAPIFindPushbotsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  findPushbots(options?: Models.CatalyticSDKAPIFindPushbotsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FindPushbotsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      findPushbotsOperationSpec,
      callback) as Promise<Models.FindPushbotsResponse>;
  }

  /**
   * @summary Gets details of a specific Pushbot process template
   * @param id The ID of the Pushbot to get
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPushbotResponse>
   */
  getPushbot(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetPushbotResponse>;
  /**
   * @param id The ID of the Pushbot to get
   * @param callback The callback
   */
  getPushbot(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The ID of the Pushbot to get
   * @param options The optional parameters
   * @param callback The callback
   */
  getPushbot(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getPushbot(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetPushbotResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getPushbotOperationSpec,
      callback) as Promise<Models.GetPushbotResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const findActionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/actions",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ActionsPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createActionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/actions",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.RegisterActionRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Action
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getActionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/actions/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Action
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const deleteActionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/actions/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const updateActionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/actions/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.UpdateActionRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Action
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findActionWorkersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/action-workers",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ActionWorkersPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createActionWorkerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/action-workers",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.CreateActionWorkerRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ActionWorkerWithCredentials
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getActionWorkerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/action-workers/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ActionWorker
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const deleteActionWorkerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/action-workers/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const updateActionWorkerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/action-workers/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.UpdateActionWorkerRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ActionWorker
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createDeveloperKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/auth",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.CreateDeveloperKeyRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.DeveloperKey
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const waitForDeveloperKeyActivationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/auth/:activate",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.DeveloperKeyActivationRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.DeveloperKey
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getDataTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/tables/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataTable
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const downloadDataTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/tables/{id}:download",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.format
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const uploadDataTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/tables/:upload",
  queryParameters: [
    Parameters.tableName,
    Parameters.headerRow,
    Parameters.sheetNumber
  ],
  formDataParameters: [
    Parameters.files
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.DataTable
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findDataTablesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/tables",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataTablesPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findDeveloperKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/developer-keys",
  queryParameters: [
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeveloperKeysPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const revokeDeveloperKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/developer-keys/{accessIdentifier}:revoke",
  urlParameters: [
    Parameters.accessIdentifier
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeveloperKey
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/files/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.File
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const downloadFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/files/{id}:download",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const uploadFilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/files/:upload",
  formDataParameters: [
    Parameters.files
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.File
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findFilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/files",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FilesPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findInstancesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/instances",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstancesPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const startInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/instances",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.StartInstanceRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Instance
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/instances/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Instance
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const stopInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/instances/{id}:stop",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Instance
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findInstanceStepsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/instances/{instanceId}/steps",
  urlParameters: [
    Parameters.instanceId
  ],
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStepsPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getInstanceStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/instances/{instanceId}/steps/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const completeStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/instances/{instanceId}/steps/{id}:complete",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.CompleteStepRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    409: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const startStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/instances/{instanceId}/steps/{id}:start",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    409: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const snoozeStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/instances/{instanceId}/steps/{id}:snooze",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    409: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const reassignStepOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/instances/{instanceId}/steps/{id}:reassign",
  urlParameters: [
    Parameters.id,
    Parameters.instanceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.ReassignTaskRequest
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceStep
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    409: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const findPushbotsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/pushbots",
  queryParameters: [
    Parameters.query,
    Parameters.status,
    Parameters.processId,
    Parameters.runId,
    Parameters.owner,
    Parameters.category,
    Parameters.pageToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PushbotsPage
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getPushbotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/pushbots/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Pushbot
    },
    401: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

export {
  CatalyticSDKAPI,
  CatalyticSDKAPIContext,
  Models as CatalyticSDKAPIModels,
  Mappers as CatalyticSDKAPIMappers
};
