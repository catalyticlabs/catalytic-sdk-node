{
    "openapi": "3.0.1",
    "info": {
      "title": "Catalytic SDK API",
      "description": "\n## API for the Catalytic SDK\n",
      "contact": {
        "name": "Catalytic for Developers",
        "url": "https://catalytic-developer.readme.io/reference/catalytic-net-sdk",
        "email": "developers@catalytic.com"
      },
      "version": "v1.0.0"
    },
    "servers": [
      {
        "url": "https://sdk.catalytic.com/v1.0.1-pre-35",
        "description": "Catalytic SDK API"
      }
    ],
    "paths": {
      "/api/access-tokens": {
        "get": {
          "tags": [
            "Access Tokens"
          ],
          "summary": "Find Access Tokens",
          "operationId": "FindAccessTokens",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "description": "Free text query terms to search all attributes for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Run or task status to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "process_id",
              "in": "query",
              "description": "Process ID (aka Pushbot ID or Workflow ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "run_id",
              "in": "query",
              "description": "RunID (aka Instance ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "owner",
              "in": "query",
              "description": "Run or task owner to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "category",
              "in": "query",
              "description": "Category of process or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "participating_users",
              "in": "query",
              "description": "Task assignee to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_before",
              "in": "query",
              "description": "Latest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Earliest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Latest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_after",
              "in": "query",
              "description": "Earliest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_token",
              "in": "query",
              "description": "The token representing the result page to get",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "The page size requested",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessTokensPage"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/access-tokens/{id}": {
        "get": {
          "tags": [
            "Access Tokens"
          ],
          "operationId": "GetAccessToken",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessToken"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/access-tokens/{id}:revoke": {
        "post": {
          "tags": [
            "Access Tokens"
          ],
          "summary": "Revoke Access Token",
          "operationId": "RevokeAccessToken",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The public Id of the AccessToken",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessToken"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/auth": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Create new AccessToken in the provided Catalytic team domain.\r\nAccessToken must be approved prior to use.",
          "operationId": "CreateAccessToken",
          "requestBody": {
            "description": "Params required to create new AccessToken",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreationRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreationRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreationRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreationRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessToken"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/auth/create-and-approve": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Create new AccessToken using provided Catalytic team domain and Approve using provided email and password.",
          "operationId": "CreateAndApproveAccessToken",
          "requestBody": {
            "description": "Params required to create and approve new AccessToken",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreationWithEmailAndPasswordRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreationWithEmailAndPasswordRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreationWithEmailAndPasswordRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreationWithEmailAndPasswordRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessToken"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/auth/wait-for-approval": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Wait until AccessToken is approved",
          "operationId": "WaitForAccessTokenApproval",
          "requestBody": {
            "description": "Params required to poll approved AccessToken",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitForAccessTokenApprovalRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitForAccessTokenApprovalRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitForAccessTokenApprovalRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitForAccessTokenApprovalRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EmptyResult"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/tables/{id}": {
        "get": {
          "tags": [
            "Data Tables"
          ],
          "summary": "Get metadata for a Data Table by ID",
          "operationId": "GetDataTable",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Data Table to get metadata for",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DataTable"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/tables/{id}/download": {
        "get": {
          "tags": [
            "Data Tables"
          ],
          "summary": "Download a Data Table as a CSV or Excel file",
          "operationId": "DownloadDataTable",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Data Table to download",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "format",
              "in": "query",
              "description": "The format to export the data table in. csv (default) or excel",
              "schema": {
                "$ref": "#/components/schemas/DataTableExportFormat"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/tables/{id}:replace": {
        "post": {
          "tags": [
            "Data Tables"
          ],
          "summary": "Replace a Data Table with contents from a CSV or Excel file",
          "operationId": "ReplaceDataTable",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Data Table to download",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "headerRow",
              "in": "query",
              "description": "The row number that contains the column headers. Defaults to 1.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 1
              }
            },
            {
              "name": "sheetNumber",
              "in": "query",
              "description": "The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 1
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                },
                "encoding": {
                  "files": {
                    "contentType": "application/octet-stream",
                    "style": "form"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DataTable"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/tables:upload": {
        "post": {
          "tags": [
            "Data Tables"
          ],
          "summary": "Upload a csv or excel file to create a data table",
          "operationId": "UploadDataTable",
          "parameters": [
            {
              "name": "tableName",
              "in": "query",
              "description": "The name of the table to create. Defaults to the file name without the extension",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "headerRow",
              "in": "query",
              "description": "The row number that contains the column headers. Defaults to 1.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 1
              }
            },
            {
              "name": "sheetNumber",
              "in": "query",
              "description": "The number of the sheet to import. Only applies to Excel files. The first sheet is imported by default.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 1
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                },
                "encoding": {
                  "files": {
                    "contentType": "application/octet-stream",
                    "style": "form"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DataTable"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/tables": {
        "get": {
          "tags": [
            "Data Tables"
          ],
          "summary": "Find Data Tables",
          "operationId": "FindDataTables",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "description": "Free text query terms to search all attributes for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Run or task status to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "process_id",
              "in": "query",
              "description": "Process ID (aka Pushbot ID or Workflow ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "run_id",
              "in": "query",
              "description": "RunID (aka Instance ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "owner",
              "in": "query",
              "description": "Run or task owner to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "category",
              "in": "query",
              "description": "Category of process or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "participating_users",
              "in": "query",
              "description": "Task assignee to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_before",
              "in": "query",
              "description": "Latest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Earliest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Latest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_after",
              "in": "query",
              "description": "Earliest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_token",
              "in": "query",
              "description": "The token representing the result page to get",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "The page size requested",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DataTablesPage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/files/{id}": {
        "get": {
          "tags": [
            "Files"
          ],
          "summary": "Get metadata of a file",
          "operationId": "GetFile",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the File to get metadata for",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FileMetadata"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/files/{id}/download": {
        "get": {
          "tags": [
            "Files"
          ],
          "summary": "Download a file",
          "operationId": "DownloadFile",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the file to download",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/files:upload": {
        "post": {
          "tags": [
            "Files"
          ],
          "summary": "Upload a file",
          "operationId": "UploadFiles",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                },
                "encoding": {
                  "files": {
                    "contentType": "application/octet-stream",
                    "style": "form"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FileMetadataPage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances": {
        "get": {
          "tags": [
            "Instances"
          ],
          "summary": "Find Instances",
          "operationId": "FindInstances",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "description": "Free text query terms to search all attributes for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Run or task status to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "process_id",
              "in": "query",
              "description": "Process ID (aka Pushbot ID or Workflow ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "run_id",
              "in": "query",
              "description": "RunID (aka Instance ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "owner",
              "in": "query",
              "description": "Run or task owner to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "category",
              "in": "query",
              "description": "Category of process or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "participating_users",
              "in": "query",
              "description": "Task assignee to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_before",
              "in": "query",
              "description": "Latest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Earliest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Latest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_after",
              "in": "query",
              "description": "Earliest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_token",
              "in": "query",
              "description": "The token representing the result page to get",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "The page size requested",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InstancesPage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        },
        "post": {
          "tags": [
            "Instances"
          ],
          "summary": "Starts a new Instance",
          "operationId": "StartInstance",
          "requestBody": {
            "description": "The details of the Instance to start",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/StartInstanceRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartInstanceRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartInstanceRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/StartInstanceRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Instance"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances/{id}": {
        "get": {
          "tags": [
            "Instances"
          ],
          "summary": "Gets details of a specific Instance",
          "operationId": "GetInstance",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Instance to get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Instance"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances/{id}:stop": {
        "post": {
          "tags": [
            "Instances"
          ],
          "summary": "Stops a specific Instance",
          "operationId": "StopInstance",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Instance to stop",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Instance"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances/{instanceId}/steps": {
        "get": {
          "tags": [
            "Instance Steps"
          ],
          "summary": "Find Instance Steps",
          "operationId": "FindInstanceSteps",
          "parameters": [
            {
              "name": "instanceId",
              "in": "path",
              "description": "The ID of the Instance",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "query",
              "in": "query",
              "description": "Free text query terms to search all attributes for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Run or task status to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "process_id",
              "in": "query",
              "description": "Process ID (aka Pushbot ID or Workflow ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "run_id",
              "in": "query",
              "description": "RunID (aka Instance ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "owner",
              "in": "query",
              "description": "Run or task owner to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "category",
              "in": "query",
              "description": "Category of process or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "participating_users",
              "in": "query",
              "description": "Task assignee to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_before",
              "in": "query",
              "description": "Latest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Earliest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Latest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_after",
              "in": "query",
              "description": "Earliest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_token",
              "in": "query",
              "description": "The token representing the result page to get",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "The page size requested",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InstanceStepsPage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances/{instanceId}/steps/{id}": {
        "get": {
          "tags": [
            "Instance Steps"
          ],
          "summary": "Gets details of a specific Instance Step",
          "operationId": "GetInstanceStep",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Instance Steps to get",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "instanceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InstanceStep"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances/{instanceId}/steps/{id}:complete": {
        "post": {
          "tags": [
            "Instance Steps"
          ],
          "summary": "Completes an Instance Step",
          "operationId": "CompleteStep",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Instance Step to complete",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "instanceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The values of the fields to complete the task with",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteStepRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteStepRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteStepRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteStepRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InstanceStep"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances/{instanceId}/steps/{id}:start": {
        "post": {
          "tags": [
            "Instance Steps"
          ],
          "summary": "Starts a pending Instance Step",
          "operationId": "StartStep",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Instance Step to start",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "instanceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InstanceStep"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances/{instanceId}/steps/{id}:snooze": {
        "post": {
          "tags": [
            "Instance Steps"
          ],
          "summary": "Snooze a pending Instance Step",
          "operationId": "SnoozeStep",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Instance Step to snooze",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "instanceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InstanceStep"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/instances/{instanceId}/steps/{id}:reassign": {
        "post": {
          "tags": [
            "Instance Steps"
          ],
          "summary": "Reassigns a Instance Step",
          "operationId": "ReassignStep",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Instance Step to reassign",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "instanceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Contains the email address of the user to reassign the Instance Step to",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReassignStepRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReassignStepRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReassignStepRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReassignStepRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InstanceStep"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/integrations": {
        "get": {
          "tags": [
            "Integrations"
          ],
          "summary": "Find Integration",
          "operationId": "FindIntegrations",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "description": "Free text query terms to search all attributes for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Run or task status to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "process_id",
              "in": "query",
              "description": "Process ID (aka Pushbot ID or Workflow ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "run_id",
              "in": "query",
              "description": "RunID (aka Instance ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "owner",
              "in": "query",
              "description": "Run or task owner to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "category",
              "in": "query",
              "description": "Category of process or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "participating_users",
              "in": "query",
              "description": "Task assignee to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_before",
              "in": "query",
              "description": "Latest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Earliest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Latest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_after",
              "in": "query",
              "description": "Earliest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_token",
              "in": "query",
              "description": "The token representing the result page to get",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "The page size requested",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationsPage"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        },
        "post": {
          "tags": [
            "Integrations"
          ],
          "summary": "Create a new Integration",
          "operationId": "CreateIntegration",
          "requestBody": {
            "description": "The definition of the action to create",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationCreationRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationCreationRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationCreationRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationCreationRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/integrations/{id}": {
        "get": {
          "tags": [
            "Integrations"
          ],
          "summary": "Gets details of a specific Integration definition",
          "operationId": "GetIntegration",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Integration to get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Integrations"
          ],
          "summary": "Update an Integration",
          "operationId": "UpdateIntegration",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The id of the action to update",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The updates to apply to the action",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationUpdateRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationUpdateRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationUpdateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationUpdateRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Integrations"
          ],
          "summary": "Deletes a specific Integration",
          "operationId": "DeleteIntegration",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Integration to delete",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IActionResult"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/users/{id}": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Gets details of a specific User",
          "operationId": "GetUser",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID or username of the User to get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/users": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "List all users on team",
          "operationId": "FindUsers",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "description": "Free text query terms to search all attributes for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Run or task status to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "process_id",
              "in": "query",
              "description": "Process ID (aka Pushbot ID or Workflow ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "run_id",
              "in": "query",
              "description": "RunID (aka Instance ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "owner",
              "in": "query",
              "description": "Run or task owner to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "category",
              "in": "query",
              "description": "Category of process or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "participating_users",
              "in": "query",
              "description": "Task assignee to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_before",
              "in": "query",
              "description": "Latest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Earliest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Latest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_after",
              "in": "query",
              "description": "Earliest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_token",
              "in": "query",
              "description": "The token representing the result page to get",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "The page size requested",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UsersPage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/workflows": {
        "get": {
          "tags": [
            "Workflows"
          ],
          "summary": "Find Workflows",
          "operationId": "FindWorkflows",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "description": "Free text query terms to search all attributes for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Run or task status to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "process_id",
              "in": "query",
              "description": "Process ID (aka Pushbot ID or Workflow ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "run_id",
              "in": "query",
              "description": "RunID (aka Instance ID) to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "owner",
              "in": "query",
              "description": "Run or task owner to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "category",
              "in": "query",
              "description": "Category of process or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "participating_users",
              "in": "query",
              "description": "Task assignee to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_before",
              "in": "query",
              "description": "Latest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Earliest start date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Latest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ended_after",
              "in": "query",
              "description": "Earliest end date of the task or run to search for",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_token",
              "in": "query",
              "description": "The token representing the result page to get",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "description": "The page size requested",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowsPage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/workflows/{id}": {
        "get": {
          "tags": [
            "Workflows"
          ],
          "summary": "Gets details of a specific Workflow process template",
          "operationId": "GetWorkflow",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Workflow to get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/workflows:import": {
        "post": {
          "tags": [
            "Workflows"
          ],
          "summary": "Imports a new Workflow",
          "operationId": "ImportWorkflow",
          "requestBody": {
            "description": "The Workflow Import request",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowImportRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowImportRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowImportRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowImportRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowImport"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/workflows/imports/{id}": {
        "get": {
          "tags": [
            "Workflows"
          ],
          "summary": "Fetch an existing WorkflowImport request",
          "operationId": "GetWorkflowImport",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The Workflow Import Id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowImport"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/workflows/{id}:export": {
        "post": {
          "tags": [
            "Workflows"
          ],
          "summary": "Exports an existing Workflow",
          "operationId": "ExportWorkflow",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the Workflow to export",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The Workflow Export request",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowExportRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowExportRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowExportRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowExportRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowExport"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      },
      "/api/workflows/exports/{id}": {
        "get": {
          "tags": [
            "Workflows"
          ],
          "summary": "Fetch an existing WorkflowExport request",
          "operationId": "GetWorkflowExport",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The Workflow Export Id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowExport"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          },
          "security": [
            {
              "Bearer": []
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "ProblemDetails": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "nullable": true
            },
            "title": {
              "type": "string",
              "nullable": true
            },
            "status": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "detail": {
              "type": "string",
              "nullable": true
            },
            "instance": {
              "type": "string",
              "nullable": true
            },
            "extensions": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "nullable": true
            }
          }
        },
        "TokenType": {
          "enum": [
            "user",
            "actionWorker"
          ],
          "type": "string",
          "description": "Represents the type of the entity associated with the AccessToken"
        },
        "AccessToken": {
          "required": [
            "domain",
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The public Id of the AccessToken",
              "format": "uuid"
            },
            "domain": {
              "type": "string",
              "description": "The Domain of the Catalytic team with which these AccessToken are associated",
              "nullable": true
            },
            "name": {
              "type": "string",
              "description": "The name associated with the AccessToken",
              "nullable": true
            },
            "type": {
              "$ref": "#/components/schemas/TokenType"
            },
            "token": {
              "type": "string",
              "description": "The serialized AccessToken Token",
              "nullable": true
            },
            "secret": {
              "type": "string",
              "description": "The confidential Secret of the AccessToken",
              "nullable": true
            },
            "environment": {
              "type": "string",
              "description": "The environment of the Catalytic team associated with the AccessToken",
              "nullable": true
            },
            "owner": {
              "type": "string",
              "description": "The email address of the user who these AccessToken belong to",
              "nullable": true
            }
          },
          "description": "An AccessToken used for authentication via the SDK"
        },
        "PagingOptions": {
          "type": "object",
          "properties": {
            "size": {
              "type": "integer",
              "description": "The page size of search results",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "description": "A token used to retrieve the next page of results",
              "nullable": true
            },
            "getAllResults": {
              "type": "boolean",
              "description": "Indicates whether all results should be retrieved"
            }
          },
          "description": "Properties required for executing a search request"
        },
        "AccessTokensPage": {
          "type": "object",
          "properties": {
            "accessTokens": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessToken"
              },
              "description": "The Collection of AccessTokens in the page",
              "nullable": true
            },
            "nextPageOptions": {
              "$ref": "#/components/schemas/PagingOptions"
            },
            "nextPageToken": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "Represents a page of AccessTokens"
        },
        "AccessTokenCreationRequest": {
          "required": [
            "domain"
          ],
          "type": "object",
          "properties": {
            "domain": {
              "type": "string",
              "description": "Catalytic team domain to authenticate in to (ex: \"myteam.pushbot.com\")",
              "nullable": true
            },
            "name": {
              "type": "string",
              "description": "Optional Name to assign to AccessToken; visible in Catalytic UI",
              "nullable": true
            }
          },
          "description": "Represents a request to generate new AccessToken for authentication into a Catalytic team"
        },
        "AccessTokenCreationWithEmailAndPasswordRequest": {
          "required": [
            "domain",
            "email",
            "password"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Optional email address of the Catalytic user for whom the AccessToken should be created",
              "nullable": true
            },
            "password": {
              "type": "string",
              "description": "Optional password of the Catalytic user for whom the AccessToken should be created",
              "nullable": true
            },
            "domain": {
              "type": "string",
              "description": "Catalytic team domain to authenticate in to (ex: \"myteam.pushbot.com\")",
              "nullable": true
            },
            "name": {
              "type": "string",
              "description": "Optional Name to assign to AccessToken; visible in Catalytic UI",
              "nullable": true
            }
          },
          "description": "Represents a request to create and approve new AccessToken for authentication into a Catalytic team\r\nwith passed username and password"
        },
        "WaitForAccessTokenApprovalRequest": {
          "required": [
            "token"
          ],
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "AccessToken string",
              "nullable": true
            },
            "waitTimeMillis": {
              "type": "integer",
              "description": "Optional timeout to wait for AccessToken to be approved via UI (milliseconds)\r\nDefaults to 300000ms (5 minutes)",
              "format": "int32",
              "nullable": true
            }
          },
          "description": "A request to activate AccessToken"
        },
        "EmptyResult": {
          "type": "object"
        },
        "FieldType": {
          "enum": [
            "undefined",
            "text",
            "integer",
            "decimal",
            "date",
            "dateTime",
            "json",
            "bool",
            "singleChoice",
            "multipleChoice",
            "instructions",
            "file",
            "table",
            "workflow",
            "instance",
            "user"
          ],
          "type": "string",
          "description": "Represents the types of data that may be stored in Fields."
        },
        "FieldRestrictions": {
          "type": "object",
          "properties": {
            "choices": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A set of valid choices for this field. If set, FieldType must be\r\nSingleChoice or MultipleChoice",
              "nullable": true
            },
            "valueRequired": {
              "type": "boolean",
              "description": "Indicates whether null or empty values will be rejected"
            }
          },
          "description": "Contains validation rules for field values"
        },
        "DataTableColumn": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "nullable": true
            },
            "type": {
              "$ref": "#/components/schemas/FieldType"
            },
            "referenceName": {
              "type": "string",
              "nullable": true
            },
            "restrictions": {
              "$ref": "#/components/schemas/FieldRestrictions"
            }
          }
        },
        "DataTableType": {
          "enum": [
            "imported",
            "master",
            "application",
            "instance",
            "batch"
          ],
          "type": "string",
          "description": "The type of data table"
        },
        "TableVisibility": {
          "enum": [
            "open",
            "restricted"
          ],
          "type": "string",
          "description": "Enum of possible Table Visibility values"
        },
        "DataTable": {
          "required": [
            "id",
            "name",
            "teamName"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the Data Table",
              "format": "uuid"
            },
            "dataTableId": {
              "type": "string",
              "description": "Alias for `Id`",
              "format": "uuid"
            },
            "referenceName": {
              "type": "string",
              "description": "Gets a unique reference name for this Data Table",
              "nullable": true
            },
            "name": {
              "type": "string",
              "description": "The descriptive name of the Data Table",
              "nullable": true
            },
            "teamName": {
              "type": "string",
              "description": "The name of the team in which the Data Table is defined",
              "nullable": true
            },
            "description": {
              "type": "string",
              "description": "A description of what kind of data is stored in the Table",
              "nullable": true
            },
            "columns": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataTableColumn"
              },
              "description": "The ordered names of the columns in this Data Table",
              "nullable": true
            },
            "isArchived": {
              "type": "boolean",
              "description": "Whether or not this table is archived and excluded from default searches"
            },
            "type": {
              "$ref": "#/components/schemas/DataTableType"
            },
            "visibility": {
              "$ref": "#/components/schemas/TableVisibility"
            },
            "visibleToUsers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The users who can find and modify this Data Table",
              "nullable": true
            },
            "rowLimit": {
              "type": "integer",
              "description": "The maximum number of rows in this Data Table",
              "format": "int32"
            },
            "columnLimit": {
              "type": "integer",
              "description": "The maximum number of columns in this Data Table",
              "format": "int32"
            },
            "cellLimit": {
              "type": "integer",
              "description": "The maximum number of cells in this Data Table",
              "format": "int32"
            }
          }
        },
        "DataTableExportFormat": {
          "enum": [
            "csv",
            "xlsx"
          ],
          "type": "string"
        },
        "DataTablesPage": {
          "type": "object",
          "properties": {
            "dataTables": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataTable"
              },
              "description": "The list of DataTables",
              "nullable": true
            },
            "nextPageOptions": {
              "$ref": "#/components/schemas/PagingOptions"
            },
            "nextPageToken": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "A page of DataTables returned from a FindAync request"
        },
        "FileMetadata": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the File in Catalytic",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "The name of the File",
              "nullable": true
            },
            "teamName": {
              "type": "string",
              "description": "The name of the Catalytic team with which the File is associated",
              "nullable": true
            },
            "contentType": {
              "type": "string",
              "description": "The content-type of the File",
              "nullable": true
            },
            "sizeInBytes": {
              "type": "integer",
              "description": "The size of the File, in bytes",
              "format": "int32"
            },
            "displaySize": {
              "type": "string",
              "description": "The human-readable size of the File",
              "nullable": true
            },
            "isPublic": {
              "type": "boolean",
              "description": "Boolean indicating whether the File can be downloaded by unauthenticated users"
            },
            "md5Hash": {
              "type": "string",
              "description": "The MD5 hash of the File",
              "nullable": true
            },
            "referenceName": {
              "type": "string",
              "description": "The stringified ID of the File, used for reference in a !:FilesPage",
              "nullable": true
            }
          }
        },
        "FileMetadataPage": {
          "type": "object",
          "properties": {
            "files": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FileMetadata"
              },
              "description": "A Collection of items with Dictionaries keyed by both ID and ReferenceName",
              "nullable": true
            },
            "nextPageOptions": {
              "$ref": "#/components/schemas/PagingOptions"
            },
            "nextPageToken": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "InstanceStepStatus": {
          "enum": [
            "pending",
            "active",
            "completed",
            "cancelled",
            "snoozed",
            "skipped",
            "error"
          ],
          "type": "string"
        },
        "Field": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the field",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "The descriptive name of the Field",
              "nullable": true
            },
            "referenceName": {
              "type": "string",
              "description": "A unique name (within the scope of the Workflow or Instance) that\r\ncan be used to reference the value of this field in\r\na template or operation.",
              "nullable": true
            },
            "description": {
              "type": "string",
              "description": "A description of this field. This can be used as instructions \r\nfor users filling out this field in a form",
              "nullable": true
            },
            "position": {
              "type": "integer",
              "description": "The visual position of this field relative others in the same scope",
              "format": "int32"
            },
            "restrictions": {
              "$ref": "#/components/schemas/FieldRestrictions"
            },
            "fieldType": {
              "$ref": "#/components/schemas/FieldType"
            },
            "value": {
              "type": "string",
              "description": "The value of this field, serialized as a string",
              "nullable": true
            },
            "defaultValue": {
              "type": "string",
              "description": "The optional default value of this field, serialized as a string. The \r\nserialization format depends on the type of field.",
              "nullable": true
            }
          },
          "description": "Represents a named and typed variable within a Workflow or Instance"
        },
        "InstanceStep": {
          "required": [
            "id",
            "instanceId",
            "name",
            "teamName",
            "workflowId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique ID of this Task",
              "format": "uuid"
            },
            "instanceId": {
              "type": "string",
              "description": "Unique ID of this Instance to which this Step belongs",
              "format": "uuid"
            },
            "workflowId": {
              "type": "string",
              "description": "Unique ID of the Workflow to which this Step belongs",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "Display name of this Task",
              "nullable": true
            },
            "teamName": {
              "type": "string",
              "description": "The name of the Catalytic team in which this Task exists",
              "nullable": true
            },
            "position": {
              "type": "integer",
              "description": "The position of this Task amongst the other Tasks in the Instance",
              "format": "int32"
            },
            "description": {
              "type": "string",
              "description": "A description or instructions of the Task",
              "nullable": true
            },
            "status": {
              "$ref": "#/components/schemas/InstanceStepStatus"
            },
            "assignedTo": {
              "type": "string",
              "description": "The email of the user (if any) that this InstanceStep is assigned to",
              "nullable": true
            },
            "actionTypeId": {
              "type": "string",
              "description": "The ID of this action type of this step",
              "nullable": true
            },
            "isAutomated": {
              "type": "boolean",
              "description": "Indicates whether or not this step is an automated action that will be completed without manual intervention."
            },
            "isManual": {
              "type": "boolean",
              "description": "Indicates whether or not this step is manual, to be completed by a person.\r\nThis is a convinience property that gets/sets the inverse of Catalytic.Sdk.Entities.InstanceStep.IsAutomated."
            },
            "startDate": {
              "type": "string",
              "description": "The start date of the step, or null if the step has not started",
              "format": "date-time",
              "nullable": true
            },
            "endDate": {
              "type": "string",
              "description": "The end date of the step, or null if the step has not started",
              "format": "date-time",
              "nullable": true
            },
            "outputFields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Field"
              },
              "description": "A collection of the required and optional output fields\r\nthat can be set by this InstanceStep when completing it.",
              "nullable": true
            }
          },
          "description": "Represents a single Step of an Instance"
        },
        "InstanceStatus": {
          "enum": [
            "running",
            "completed",
            "cancelled"
          ],
          "type": "string",
          "description": "Represents the status of an instance"
        },
        "FieldVisibility": {
          "enum": [
            "public",
            "internal",
            "confidential",
            "highlyConfidential"
          ],
          "type": "string"
        },
        "InstanceVisibilty": {
          "enum": [
            "open",
            "restricted"
          ],
          "type": "string",
          "description": "Represents whether or not an instance can be viewed by any\r\nteam member, or just specific team members"
        },
        "Instance": {
          "required": [
            "id",
            "teamName",
            "workflowId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the Instance",
              "format": "uuid"
            },
            "workflowId": {
              "type": "string",
              "description": "The unique ID of the Workflow this Instance was started from",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "The descriptive name of the Instance",
              "nullable": true
            },
            "teamName": {
              "type": "string",
              "description": "The name of the Catalytic team in which this Instance was started",
              "nullable": true
            },
            "description": {
              "type": "string",
              "description": "A description of the Instance",
              "nullable": true
            },
            "category": {
              "type": "string",
              "description": "A descriptive grouping for the Instance",
              "nullable": true
            },
            "owner": {
              "type": "string",
              "description": "The email address of the user who owns this Instance",
              "nullable": true
            },
            "createdBy": {
              "type": "string",
              "description": "The email address of the user who created this Instance",
              "nullable": true
            },
            "steps": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InstanceStep"
              },
              "description": "A collection of the Tasks belonging to this Instance",
              "nullable": true
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Field"
              },
              "description": "A collection of the Fields belonging to this Instance",
              "nullable": true
            },
            "status": {
              "$ref": "#/components/schemas/InstanceStatus"
            },
            "startDate": {
              "type": "string",
              "description": "The start date of the instance",
              "format": "date-time"
            },
            "endDate": {
              "type": "string",
              "description": "The end date of the instance, or null if the step has not started",
              "format": "date-time",
              "nullable": true
            },
            "fieldVisibility": {
              "$ref": "#/components/schemas/FieldVisibility"
            },
            "visibility": {
              "$ref": "#/components/schemas/InstanceVisibilty"
            },
            "visibleToUsers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The users who can find and interact with this Instance",
              "nullable": true
            }
          },
          "description": "Represents an Instance of a Workflow"
        },
        "InstancesPage": {
          "type": "object",
          "properties": {
            "instances": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Instance"
              },
              "description": "The list of Instances",
              "nullable": true
            },
            "nextPageOptions": {
              "$ref": "#/components/schemas/PagingOptions"
            },
            "nextPageToken": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "A page of Instances returned from a FindAync request"
        },
        "FieldUpdateRequest": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the field",
              "nullable": true
            },
            "referenceName": {
              "type": "string",
              "description": "The reference name of the field",
              "nullable": true
            },
            "value": {
              "type": "string",
              "description": "The string-serialized value of the field",
              "nullable": true
            }
          },
          "description": "Request to update the value of a field"
        },
        "StartInstanceRequest": {
          "type": "object",
          "properties": {
            "workflowId": {
              "type": "string",
              "description": "ID of the Workflow to start",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "Optional name for the instance",
              "nullable": true
            },
            "description": {
              "type": "string",
              "description": "Optional description for the instance",
              "nullable": true
            },
            "inputFields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldUpdateRequest"
              },
              "description": "A collection of the required and optional input fields\r\nthat can be passed to this Workflow when starting it.",
              "nullable": true
            }
          }
        },
        "InstanceStepsPage": {
          "type": "object",
          "properties": {
            "steps": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InstanceStep"
              },
              "description": "The list of Steps",
              "nullable": true
            },
            "nextPageOptions": {
              "$ref": "#/components/schemas/PagingOptions"
            },
            "nextPageToken": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "A page of Instance Steps returned from a FindAync request"
        },
        "CompleteStepRequest": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "ID of the step to complete",
              "format": "uuid"
            },
            "stepOutputFields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldUpdateRequest"
              },
              "description": "A collection of the required and optional input fields\r\nthat can be passed to this Workflow when starting it.",
              "nullable": true
            }
          }
        },
        "ReassignStepRequest": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "ID of the step to reassign",
              "format": "uuid"
            },
            "assignTo": {
              "type": "string",
              "description": "The email address of the user to reassign the task to",
              "nullable": true
            }
          }
        },
        "IntegrationConnection": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique Id of the Integration Connection",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "The display Name of the Integration Connection",
              "nullable": true
            },
            "referenceName": {
              "type": "string",
              "description": "The unique Reference Name of the Integration Connection",
              "nullable": true
            },
            "integrationId": {
              "type": "string",
              "description": "The Id of the Integration Definition with which this Integration Connection was created",
              "nullable": true
            }
          }
        },
        "Integration": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the Integration",
              "nullable": true
            },
            "referenceName": {
              "type": "string",
              "nullable": true
            },
            "name": {
              "type": "string",
              "description": "The display Name of the Integration",
              "nullable": true
            },
            "isCustomIntegration": {
              "type": "boolean",
              "description": "Boolean indicating whether this Integration Defintion is custom to your Catalytic team.\r\nOnly custom Integrations can be updated using the SDK."
            },
            "connections": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntegrationConnection"
              },
              "description": "The List of Integration Connections using this Integration",
              "nullable": true
            }
          }
        },
        "IntegrationsPage": {
          "type": "object",
          "properties": {
            "integrations": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Integration"
              },
              "description": "The list of Integrations",
              "nullable": true
            },
            "nextPageOptions": {
              "$ref": "#/components/schemas/PagingOptions"
            },
            "nextPageToken": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "A page of Integrations returned from a FindAync request"
        },
        "IntegrationType": {
          "enum": [
            "oAuth2"
          ],
          "type": "string",
          "description": "Type of authentication used by an Integration Definition"
        },
        "IntegrationConfiguration": {
          "required": [
            "authorizeBaseUrl",
            "clientId",
            "clientSecret",
            "revokePath",
            "site",
            "tokenPath"
          ],
          "type": "object",
          "properties": {
            "clientId": {
              "type": "string",
              "description": "Client Id corresponding to the custom OAuth application",
              "nullable": true
            },
            "clientSecret": {
              "type": "string",
              "description": "Client Secret corresponding to the custom OAuth application",
              "nullable": true
            },
            "tokenPath": {
              "type": "string",
              "description": "Token Path corresponding to the custom OAuth application",
              "nullable": true
            },
            "revokePath": {
              "type": "string",
              "description": "Token Revoke Path corresponding to the custom OAuth application",
              "nullable": true
            },
            "site": {
              "type": "string",
              "description": "The site corresponding to the custom OAuth application",
              "format": "uri",
              "nullable": true
            },
            "authorizeBaseUrl": {
              "type": "string",
              "description": "The Authorization base url corresponding to the custom OAuth application",
              "format": "uri",
              "nullable": true
            },
            "scopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The scopes corresponding to the custom OAuth application",
              "nullable": true
            },
            "useBodyAuth": {
              "type": "boolean",
              "description": "Whether to supply authorization credentials in the body of the request",
              "nullable": true
            }
          },
          "description": "Authentication configuration settings for the Integration Definition"
        },
        "IntegrationCreationRequest": {
          "required": [
            "config",
            "name",
            "type"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The display Name to apply to the  Integration",
              "nullable": true
            },
            "type": {
              "$ref": "#/components/schemas/IntegrationType"
            },
            "config": {
              "$ref": "#/components/schemas/IntegrationConfiguration"
            }
          }
        },
        "IntegrationUpdateRequest": {
          "required": [
            "config",
            "name",
            "type"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The display Name to apply to the Integration Definition",
              "nullable": true
            },
            "type": {
              "$ref": "#/components/schemas/IntegrationType"
            },
            "config": {
              "$ref": "#/components/schemas/IntegrationConfiguration"
            }
          }
        },
        "IActionResult": {
          "type": "object"
        },
        "User": {
          "required": [
            "email",
            "fullName",
            "id",
            "teamName"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique ID for the user",
              "format": "uuid"
            },
            "username": {
              "type": "string",
              "description": "Unique username of user",
              "nullable": true
            },
            "email": {
              "type": "string",
              "description": "The email address associated with this user",
              "nullable": true
            },
            "fullName": {
              "type": "string",
              "description": "The user's full name",
              "nullable": true
            },
            "teamName": {
              "type": "string",
              "description": "The name of this User's Catalytic team",
              "nullable": true
            }
          },
          "description": "Represents a user on a Catalytic team"
        },
        "UsersPage": {
          "type": "object",
          "properties": {
            "users": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              },
              "description": "The List of Users",
              "nullable": true
            },
            "nextPageOptions": {
              "$ref": "#/components/schemas/PagingOptions"
            },
            "nextPageToken": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "A page of Users returned from a FindAsync request"
        },
        "Workflow": {
          "required": [
            "id",
            "name",
            "teamName"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the Workflow",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "The descriptive name of the Workflow",
              "nullable": true
            },
            "teamName": {
              "type": "string",
              "description": "The name of the team in which the Workflow is defined",
              "nullable": true
            },
            "description": {
              "type": "string",
              "description": "A description of what the Workflow does",
              "nullable": true
            },
            "category": {
              "type": "string",
              "description": "A descriptive grouping for your Workflow",
              "nullable": true
            },
            "owner": {
              "type": "string",
              "description": "The email address of the user who owns this Workflow",
              "nullable": true
            },
            "createdBy": {
              "type": "string",
              "description": "The email address of the user who created this Workflow",
              "nullable": true
            },
            "inputFields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Field"
              },
              "description": "A collection of the required and optional input fields\r\nthat can be passed to this Workflow when starting it.",
              "nullable": true
            },
            "isPublished": {
              "type": "boolean",
              "description": "Indicates whether the Workflow is published; if false, Workflow is in draft mode"
            },
            "isArchived": {
              "type": "boolean",
              "description": "Indicates whether is Archived and no longer available for users to find, start or edit."
            },
            "fieldVisibility": {
              "$ref": "#/components/schemas/FieldVisibility"
            },
            "instanceVisibility": {
              "$ref": "#/components/schemas/InstanceVisibilty"
            },
            "adminUsers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The users who may view, start, and edit this Workflow in addition to Catalytic.Sdk.Entities.Workflow.Owner",
              "nullable": true
            },
            "standardUsers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The users who can view and start this Workflow",
              "nullable": true
            },
            "taskCountLimit": {
              "type": "integer",
              "description": "The maximum number of steps that can appear in an Instance of this Workflow",
              "format": "int32"
            },
            "fieldCountLimit": {
              "type": "integer",
              "description": "The maximum number of fields that can appear in an Instance of this Workflow",
              "format": "int32"
            },
            "fieldSizeLimit": {
              "type": "integer",
              "description": "The maximum size of data stored in any field in an Instance of this Workflow",
              "format": "int32"
            },
            "fieldTotalSizeLimit": {
              "type": "integer",
              "description": "The maximum total size of data stored in all fields in an Instance of this Workflow",
              "format": "int32"
            },
            "dataTableRowLimit": {
              "type": "integer",
              "description": "The maximum number of rows of any data table created in an Instance of this Workflow",
              "format": "int32"
            },
            "dataTableColumnLimit": {
              "type": "integer",
              "description": "The maximum number of columns of any data table created in an Instance of this Workflow",
              "format": "int32"
            },
            "dataTableCellLimit": {
              "type": "integer",
              "description": "The maximum number of cells of any data table created in an Instance of this Workflow",
              "format": "int32"
            }
          },
          "description": "A Workflow is an automation on the Catalytic platform. It is a template\r\nof the process you want to run each time your Workflow is started."
        },
        "WorkflowsPage": {
          "type": "object",
          "properties": {
            "workflows": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Workflow"
              },
              "description": "The List of Workflows",
              "nullable": true
            },
            "nextPageOptions": {
              "$ref": "#/components/schemas/PagingOptions"
            },
            "nextPageToken": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "A page of Workflows returned from a FindAsync request"
        },
        "WorkflowImportRequest": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The FileID of the uploaded .catalytic Workflow Export file",
              "format": "uuid"
            },
            "password": {
              "type": "string",
              "description": "The optional password used to secure the .catalytic Workflow Export file",
              "nullable": true
            }
          },
          "description": "A request to import a Workflow from a .catalytic Workflow Export file"
        },
        "WorkflowImport": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The Id of the Workflow Import",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "nullable": true
            },
            "workflowId": {
              "type": "string",
              "description": "The Id of the Workflow created by a successful Import",
              "format": "uuid",
              "nullable": true
            },
            "errorMessage": {
              "type": "string",
              "description": "The error message produced by a failed Import",
              "nullable": true
            }
          },
          "description": "Represents a Workflow Import"
        },
        "WorkflowExportRequest": {
          "type": "object",
          "properties": {
            "workflowId": {
              "type": "string",
              "description": "The ID of the Workflow to export",
              "format": "uuid"
            },
            "password": {
              "type": "string",
              "description": "The optional password to use to secure the .catalytic Workflow Export file",
              "nullable": true
            }
          },
          "description": "A request to create a .catalytic Workflow Export file"
        },
        "WorkflowExport": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The Id of the Workflow Export",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "nullable": true
            },
            "fileId": {
              "type": "string",
              "description": "The Id of the File created by a successful Export",
              "format": "uuid",
              "nullable": true
            },
            "errorMessage": {
              "type": "string",
              "description": "The error message produced by a failed Export",
              "nullable": true
            }
          },
          "description": "Represents a Workflow Export"
        }
      },
      "securitySchemes": {
        "Bearer": {
          "type": "http",
          "description": "Bearer Authorization using AccessToken",
          "scheme": "bearer"
        }
      }
    },
    "tags": [
      {
        "name": "Authentication",
        "description": "Provides an authentication token that can be used to call other endpoints"
      },
      {
        "name": "Users",
        "description": "Endpoints for managing users"
      },
      {
        "name": "Access Tokens",
        "description": "Endpoints for obtaining and managing Access Tokens"
      },
      {
        "name": "Workflows",
        "description": "Endpoints for managing Workflow process templates"
      },
      {
        "name": "Instances",
        "description": "Endpoints for managing Workflow Instances"
      },
      {
        "name": "Instance Steps",
        "description": "Endpoints for managing Instance Steps"
      },
      {
        "name": "Files",
        "description": "Endpoints for managing, uploading and downloading files"
      },
      {
        "name": "Data Tables",
        "description": "Endpoints for managing, uploading and downloading data tables"
      }
    ]
  }
